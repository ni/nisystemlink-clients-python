# generated by datamodel-codegen:
#   filename:  <stdin>

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Dict, List, Optional

from nisystemlink.clients.core._uplink._json_model import JsonModel
from pydantic import Field


class Link(JsonModel):
    href: str = Field(..., example="/nifile/v1/service-groups")
    """
    URI of the link
    """


class Error(JsonModel):
    name: Optional[str] = None
    """
    String error code
    """
    code: Optional[int] = None
    """
    Numeric error code
    """
    resource_type: Optional[str] = Field(None, alias="resourceType")
    """
    Type of resource associated with the error
    """
    resource_id: Optional[str] = Field(None, alias="resourceId")
    """
    Identifier of the resource associated with the error
    """
    message: Optional[str] = None
    """
    Complete error message
    """
    args: Optional[List[str]] = None
    """
    Positional argument values for the error code
    """
    inner_errors: Optional[List[Error]] = Field(None, alias="innerErrors")


class BadRequestError(JsonModel):
    name: Optional[str] = None
    """
    String error code
    """
    code: Optional[int] = None
    """
    Numeric error code
    """
    message: Optional[str] = None
    """
    Complete error message
    """


class FileMetadata(JsonModel):
    field_links: Optional[Dict[str, Link]] = Field(
        None,
        alias="_links",
        example={
            "data": {
                "href": "/nifile/v1/service-groups/Default/files/5b0739cc741fe114f08bd06c/data"
            },
            "delete": {
                "href": "/nifile/v1/service-groups/Default/files/5b0739cc741fe114f08bd06c"
            },
            "self": {
                "href": "/nifile/v1/service-groups/Default/files/5b0739cc741fe114f08bd06c"
            },
            "updateMetadata": {
                "href": "/nifile/v1/service-groups/Default/files/5b0739cc741fe114f08bd06c/update-metadata"
            },
        },
    )
    """
    The links to access and manipulate the file:
    - data: Link to download the file using a GET request
    - delete: Link to delete the file using a DELETE request
    - self: Link to the file's metadata
    - updateMetadata: Link to update the file's metadata using a POST request
    """
    created: Optional[datetime] = Field(None, example="2018-05-15T18:54:27.519Z")
    """
    The date and time the file was created in the file service
    """
    id: Optional[str] = Field(None, example="5afb2ce3741fe11d88838cc9")
    """
    The file's ID within the service group
    """
    path: Optional[str] = Field(None, example="C:\\temp\\4afb2ce3741fe11d88838cc9.txt")
    """
    The path to the file on the server.  This field is returned only if
    the user has associated privileges to view file paths.
    """
    properties: Optional[Dict[str, str]] = Field(
        None, example={"Name": "myfile.txt", "MyProperty": "Value"}
    )
    """
    The file's properties
    """
    meta_data_revision: Optional[int] = Field(None, alias="metaDataRevision", example=1)
    """
    The file's properties revision number. When a file is uploaded, the revision number starts at 1.
    Every time metadata is updated, the revision number is incremented by 1.
    New in version 3 of the listFiles operation.
    """
    service_group: Optional[str] = Field(None, alias="serviceGroup", example="Default")
    """
    The service group that owns the file
    """
    size: Optional[int] = Field(None, example=7277)
    """
    The 32-bit file size in bytes. If the value is larger than a 32-bit integer,
    this value is -1 and the size64 parameter contains the correct value.
    """
    size64: Optional[int] = Field(None, example=7277)
    """
    The 64-bit file size in bytes
    """
    workspace: Optional[str] = Field(None, example="MyWorkspace")
    """
    The workspace the file belongs to
    """
    last_updated_timestamp: Optional[datetime] = Field(
        None, alias="lastUpdatedTimestamp", example="2018-05-15T18:54:27.519Z"
    )
    """
    The date and time the file was last updated in the file service
    """


class LinqFileMetadata(JsonModel):
    created: Optional[datetime] = Field(None, example="2018-05-15T18:54:27.519Z")
    """
    The date and time the file was created in the file service
    """
    id: Optional[str] = Field(None, example="5afb2ce3741fe11d88838cc9")
    """
    The file's ID within the service group
    """
    properties: Optional[Dict[str, str]] = Field(
        None, example={"Name": "myfile.txt", "MyProperty": "Value"}
    )
    """
    The file's properties
    """
    service_group: Optional[str] = Field(None, alias="serviceGroup", example="Default")
    """
    The service group that owns the file
    """
    size: Optional[int] = Field(None, example=7277)
    """
    The 32-bit file size in bytes. If the value is larger than a 32-bit integer,
    this value is -1 and the size64 parameter contains the correct value.
    """
    size64: Optional[int] = Field(None, example=7277)
    """
    The 64-bit file size in bytes
    """
    workspace: Optional[str] = Field(
        None, example="846e324a-a007-47ac-9fc2-fac07eab230e"
    )
    """
    The workspace the file belongs to
    """


class ServiceGroup(JsonModel):
    name: Optional[str] = Field(None, example="Default")
    """
    The service group's name
    """
    field_links: Optional[Dict[str, Link]] = Field(
        None,
        alias="_links",
        example={
            "deleteFiles": {"href": "/nifile/v1/service-groups/Default/delete-files"},
            "files": {"href": "/nifile/v1/service-groups/Default/files"},
            "query": {"href": "/nifile/v1/service-groups/Default/query-files"},
            "searchFiles": {"href": "/nifile/v1/service-groups/Default/files"},
            "self": {"href": "/nifile/v1/service-groups/Default"},
            "upload": {"href": "/nifile/v1/service-groups/Default/upload-files"},
        },
    )
    """
    The links that apply to a service group:
    - deleteFiles: Link to delete multiple files from the service group using POST
    - files: Link to retrieve a list of files in the service group using GET
    - query: Link to query for available files in the service group using POST
    - searchFiles: Link to retrieve a filtered list of files in the service group using GET
    - self: Link to the current service group
    - upload: Link to upload files to the service group using POST
    """


class Operation(Enum):
    EQUAL = "EQUAL"
    GREATER_THAN = "GREATER_THAN"
    GREATER_THAN_OR_EQUAL = "GREATER_THAN_OR_EQUAL"
    LESS_THAN = "LESS_THAN"
    LESS_THAN_OR_EQUAL = "LESS_THAN_OR_EQUAL"
    NOT_EQUAL = "NOT_EQUAL"


class DateQuery(JsonModel):
    operation: Operation
    """
    The query operation
    """
    value: datetime = Field(..., example="2018-05-14T00:00:00Z")
    """
    The value of the field to search for
    """


class IntegerQuery(JsonModel):
    operation: Operation
    """
    The query operation
    """
    value: int = Field(..., example=5000)
    """
    The value of the field to search for
    """


class Operation2(Enum):
    EQUAL = "EQUAL"
    NOT_EQUAL = "NOT_EQUAL"


class PropertyQuery(JsonModel):
    key: str = Field(..., example="Name")
    """
    The name of the property to search against
    """
    operation: Operation2
    """
    The query operation
    """
    value: str = Field(..., example="myfile.txt")
    """
    The value of the property to search for
    """


class IdsQuery(JsonModel):
    operation: Operation2
    """
    The query operation
    """
    ids: List[str]
    """
    The array of ids to search for
    """


class StringQuery(JsonModel):
    operation: Operation2
    """
    The query operation
    """
    value: str = Field(..., example="txt")
    """
    The value of the field to search for
    """


class Operation5(JsonModel):
    available: bool
    """
    Whether the operation is available to the caller
    """
    version: Optional[int] = None
    """
    The version of the available operation
    """


class OrderBy(Enum):
    CREATED = "CREATED"
    UPDATED = "UPDATED"
    EXTENSION = "EXTENSION"
    SIZE = "SIZE"
    WORKSPACE = "WORKSPACE"


class LinqFileQuery(JsonModel):
    filter: Optional[str] = None
    """
    The filter criteria for files. Consists of a string of queries composed using AND/OR operators.
    String values and date strings need to be enclosed in double quotes.
    Parentheses can be used around filters to better define the order of operations.

    Filter syntax: '[property name][operator][operand] and [property name][operator][operand]'

    Operators:
    - Equals operator '='. Example: 'x = y'
    - Not equal operator '!='. Example: 'x != y'
    - Greater than operator '>'. Example: 'x > y'
    - Greater than or equal operator '>='. Example: 'x >= y'
    - Less than operator '<'. Example: 'x < y'
    - Less than or equal operator '<='. Example: 'x <= y'
    - Logical AND operator 'and' or '&&'. Example: 'x and y'
    - Logical OR operator 'or' or '||'. Example: 'x or y'
    - Contains operator '.Contains()', which is used to check if a list contains an element. Example: 'x.Contains(y)'
    - Not Contains operator '!.Contains()', which is used to check if a list does not contain an element.
      Example: '!x.Contains(y)'

    Valid file properties that can be used in the filter:
    - created : String representing the ISO representation of the creation timestamp, example: 2023-01-01T08:00:00.000Z
    - updated : String representing the ISO representation of the update timestamp, example: 2023-01-01T08:00:00.000Z
    - extension: File extension. Example: png, txt, pdf
    - size: File size expressed in bytes. Example: 1024
    - userId: User Id that created the file. Example: 8abc4b87-07d4-4f84-b54f-48eec89b07d4
    - properties: File properties. Example: properties['x'] = 'y'
    - workspace : The workspace of the files. Example: 88974b87-07d4-4f84-b54f-48eec89b11ed
    """
    order_by: Optional[OrderBy] = Field("UPDATED", alias="orderBy")
    """
    The file value property to order results by.
    """
    descending: Optional[bool] = True
    """
    A Boolean that determines whether to return the files in descending order.
    """
    take: Optional[float] = Field(None, ge=1.0)
    """
    Maximum number of files to return.
    """


class Operations(JsonModel):
    delete_files: Optional[Operation5] = Field(None, alias="deleteFiles")
    download_data: Optional[Operation5] = Field(None, alias="downloadData")
    list_files: Optional[Operation5] = Field(None, alias="listFiles")
    query_files: Optional[Operation5] = Field(None, alias="queryFiles")
    update_metadata: Optional[Operation5] = Field(None, alias="updateMetadata")
    upload_files: Optional[Operation5] = Field(None, alias="uploadFiles")


class V1Operations(JsonModel):
    operations: Optional[Operations] = None
    """
    Available operations in the v1 version of the API:
    - deleteFiles: The ability to delete uploaded files
    - downloadData: The ability to download file data
    - listFiles: The ability to list available files and service groups
    - queryFiles: The ability to query available files and service groups
    - updateMetadata: The ability to update file metadata properties
    - uploadFiles: The ability to upload files
    """


Error.update_forward_refs()
