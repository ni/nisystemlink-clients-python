versions pytest-7.4.4, python-3.13.0.final.0
cwd=D:\nisystemlink-clients-python\tests\integration\assetManagement
args=('-m', 'enterprise', '--enterprise-uri', 'https://dev-api.lifecyclesolutions.ni.com/', '--enterprise-api-key', 'vnM8ubwlSN4WDPSDeIv35eJp2zRN6yZp28yP9qTbYE', '--debug')

  pytest_cmdline_main [hook]
      config: <_pytest.config.Config object at 0x0000013CD65D6270>
    pytest_plugin_registered [hook]
        plugin: <Session nisystemlink-clients-python exitstatus='<UNSET>' testsfailed=0 testscollected=0>
        manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
    finish pytest_plugin_registered --> [] [hook]
    pytest_configure [hook]
        config: <_pytest.config.Config object at 0x0000013CD65D6270>
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x0000013CD80C5550>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x0000013CD8AEEE40>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
    early skip of rewriting module: faulthandler [assertion]
      pytest_plugin_registered [hook]
          plugin: <class '_pytest.legacypath.LegacyTmpdirPlugin'>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
    early skip of rewriting module: pdb [assertion]
    early skip of rewriting module: cmd [assertion]
    early skip of rewriting module: code [assertion]
    early skip of rewriting module: codeop [assertion]
    early skip of rewriting module: rlcompleter [assertion]
    early skip of rewriting module: readline [assertion]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.Config object at 0x0000013CD65D6270>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.mark' from 'C:\\Users\\sam.rishi\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\nisystemlink-clients-uNO-BdPa-py3.13\\Lib\\site-packages\\_pytest\\mark\\__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.main' from 'C:\\Users\\sam.rishi\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\nisystemlink-clients-uNO-BdPa-py3.13\\Lib\\site-packages\\_pytest\\main.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.runner' from 'C:\\Users\\sam.rishi\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\nisystemlink-clients-uNO-BdPa-py3.13\\Lib\\site-packages\\_pytest\\runner.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.fixtures' from 'C:\\Users\\sam.rishi\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\nisystemlink-clients-uNO-BdPa-py3.13\\Lib\\site-packages\\_pytest\\fixtures.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.helpconfig' from 'C:\\Users\\sam.rishi\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\nisystemlink-clients-uNO-BdPa-py3.13\\Lib\\site-packages\\_pytest\\helpconfig.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python' from 'C:\\Users\\sam.rishi\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\nisystemlink-clients-uNO-BdPa-py3.13\\Lib\\site-packages\\_pytest\\python.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.terminal' from 'C:\\Users\\sam.rishi\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\nisystemlink-clients-uNO-BdPa-py3.13\\Lib\\site-packages\\_pytest\\terminal.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.debugging' from 'C:\\Users\\sam.rishi\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\nisystemlink-clients-uNO-BdPa-py3.13\\Lib\\site-packages\\_pytest\\debugging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unittest' from 'C:\\Users\\sam.rishi\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\nisystemlink-clients-uNO-BdPa-py3.13\\Lib\\site-packages\\_pytest\\unittest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.capture' from 'C:\\Users\\sam.rishi\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\nisystemlink-clients-uNO-BdPa-py3.13\\Lib\\site-packages\\_pytest\\capture.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.skipping' from 'C:\\Users\\sam.rishi\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\nisystemlink-clients-uNO-BdPa-py3.13\\Lib\\site-packages\\_pytest\\skipping.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.legacypath' from 'C:\\Users\\sam.rishi\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\nisystemlink-clients-uNO-BdPa-py3.13\\Lib\\site-packages\\_pytest\\legacypath.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.tmpdir' from 'C:\\Users\\sam.rishi\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\nisystemlink-clients-uNO-BdPa-py3.13\\Lib\\site-packages\\_pytest\\tmpdir.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.monkeypatch' from 'C:\\Users\\sam.rishi\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\nisystemlink-clients-uNO-BdPa-py3.13\\Lib\\site-packages\\_pytest\\monkeypatch.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.recwarn' from 'C:\\Users\\sam.rishi\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\nisystemlink-clients-uNO-BdPa-py3.13\\Lib\\site-packages\\_pytest\\recwarn.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.pastebin' from 'C:\\Users\\sam.rishi\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\nisystemlink-clients-uNO-BdPa-py3.13\\Lib\\site-packages\\_pytest\\pastebin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.nose' from 'C:\\Users\\sam.rishi\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\nisystemlink-clients-uNO-BdPa-py3.13\\Lib\\site-packages\\_pytest\\nose.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.assertion' from 'C:\\Users\\sam.rishi\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\nisystemlink-clients-uNO-BdPa-py3.13\\Lib\\site-packages\\_pytest\\assertion\\__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.junitxml' from 'C:\\Users\\sam.rishi\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\nisystemlink-clients-uNO-BdPa-py3.13\\Lib\\site-packages\\_pytest\\junitxml.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.doctest' from 'C:\\Users\\sam.rishi\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\nisystemlink-clients-uNO-BdPa-py3.13\\Lib\\site-packages\\_pytest\\doctest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.cacheprovider' from 'C:\\Users\\sam.rishi\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\nisystemlink-clients-uNO-BdPa-py3.13\\Lib\\site-packages\\_pytest\\cacheprovider.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.freeze_support' from 'C:\\Users\\sam.rishi\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\nisystemlink-clients-uNO-BdPa-py3.13\\Lib\\site-packages\\_pytest\\freeze_support.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setuponly' from 'C:\\Users\\sam.rishi\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\nisystemlink-clients-uNO-BdPa-py3.13\\Lib\\site-packages\\_pytest\\setuponly.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setupplan' from 'C:\\Users\\sam.rishi\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\nisystemlink-clients-uNO-BdPa-py3.13\\Lib\\site-packages\\_pytest\\setupplan.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.stepwise' from 'C:\\Users\\sam.rishi\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\nisystemlink-clients-uNO-BdPa-py3.13\\Lib\\site-packages\\_pytest\\stepwise.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.warnings' from 'C:\\Users\\sam.rishi\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\nisystemlink-clients-uNO-BdPa-py3.13\\Lib\\site-packages\\_pytest\\warnings.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.logging' from 'C:\\Users\\sam.rishi\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\nisystemlink-clients-uNO-BdPa-py3.13\\Lib\\site-packages\\_pytest\\logging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.reports' from 'C:\\Users\\sam.rishi\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\nisystemlink-clients-uNO-BdPa-py3.13\\Lib\\site-packages\\_pytest\\reports.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python_path' from 'C:\\Users\\sam.rishi\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\nisystemlink-clients-uNO-BdPa-py3.13\\Lib\\site-packages\\_pytest\\python_path.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unraisableexception' from 'C:\\Users\\sam.rishi\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\nisystemlink-clients-uNO-BdPa-py3.13\\Lib\\site-packages\\_pytest\\unraisableexception.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.threadexception' from 'C:\\Users\\sam.rishi\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\nisystemlink-clients-uNO-BdPa-py3.13\\Lib\\site-packages\\_pytest\\threadexception.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.faulthandler' from 'C:\\Users\\sam.rishi\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\nisystemlink-clients-uNO-BdPa-py3.13\\Lib\\site-packages\\_pytest\\faulthandler.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'anyio.pytest_plugin' from 'C:\\Users\\sam.rishi\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\nisystemlink-clients-uNO-BdPa-py3.13\\Lib\\site-packages\\anyio\\pytest_plugin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_asyncio.plugin' from 'C:\\Users\\sam.rishi\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\nisystemlink-clients-uNO-BdPa-py3.13\\Lib\\site-packages\\pytest_asyncio\\plugin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <CaptureManager _method='fd' _global_capturing=<MultiCapture out=<FDCapture 1 oldfd=9 _state='suspended' tmpfile=<EncodedFile name='<tempfile._TemporaryFileWrapper object at 0x0000013CD80C7380>' mode='r+' encoding='utf-8'>> err=<FDCapture 2 oldfd=11 _state='suspended' tmpfile=<EncodedFile name='<tempfile._TemporaryFileWrapper object at 0x0000013CD819C190>' mode='r+' encoding='utf-8'>> in_=<FDCapture 0 oldfd=7 _state='started' tmpfile=<_io.TextIOWrapper name='nul' mode='r' encoding='utf-8'>> _state='suspended' _in_suspended=False> _capture_fixture=None>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'conftest' from 'D:\\nisystemlink-clients-python\\conftest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <Session nisystemlink-clients-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x0000013CD80C5550>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x0000013CD8AEEE40>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <class '_pytest.legacypath.LegacyTmpdirPlugin'>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_warning_recorded [hook]
          warning_message: {message : DeprecationWarning("Failing to pass a value to the 'type_params' parameter of 'typing.ForwardRef._evaluate' is deprecated, as it leads to incorrect behaviour when calling typing.ForwardRef._evaluate on a stringified annotation that references a PEP 695 type parameter. It will be disallowed in Python 3.15."), category : 'DeprecationWarning', filename : 'C:\\Users\\sam.rishi\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\nisystemlink-clients-uNO-BdPa-py3.13\\Lib\\site-packages\\pydantic\\typing.py', lineno : 68, line : None}
          nodeid: 
          when: config
          location: None
      finish pytest_warning_recorded --> [] [hook]
      pytest_warning_recorded [hook]
          warning_message: {message : DeprecationWarning("Failing to pass a value to the 'type_params' parameter of 'typing.ForwardRef._evaluate' is deprecated, as it leads to incorrect behaviour when calling typing.ForwardRef._evaluate on a stringified annotation that references a PEP 695 type parameter. It will be disallowed in Python 3.15."), category : 'DeprecationWarning', filename : 'C:\\Users\\sam.rishi\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\nisystemlink-clients-uNO-BdPa-py3.13\\Lib\\site-packages\\pydantic\\typing.py', lineno : 68, line : None}
          nodeid: 
          when: config
          location: None
      finish pytest_warning_recorded --> [] [hook]
      pytest_warning_recorded [hook]
          warning_message: {message : DeprecationWarning("Failing to pass a value to the 'type_params' parameter of 'typing.ForwardRef._evaluate' is deprecated, as it leads to incorrect behaviour when calling typing.ForwardRef._evaluate on a stringified annotation that references a PEP 695 type parameter. It will be disallowed in Python 3.15."), category : 'DeprecationWarning', filename : 'C:\\Users\\sam.rishi\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\nisystemlink-clients-uNO-BdPa-py3.13\\Lib\\site-packages\\pydantic\\typing.py', lineno : 68, line : None}
          nodeid: 
          when: config
          location: None
      finish pytest_warning_recorded --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.terminal.TerminalReporter object at 0x0000013CD8BFC1A0>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.logging.LoggingPlugin object at 0x0000013CD8BFC6E0>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
    finish pytest_configure --> [] [hook]
    pytest_sessionstart [hook]
        session: <Session nisystemlink-clients-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.Config object at 0x0000013CD65D6270>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.mark' from 'C:\\Users\\sam.rishi\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\nisystemlink-clients-uNO-BdPa-py3.13\\Lib\\site-packages\\_pytest\\mark\\__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.main' from 'C:\\Users\\sam.rishi\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\nisystemlink-clients-uNO-BdPa-py3.13\\Lib\\site-packages\\_pytest\\main.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.runner' from 'C:\\Users\\sam.rishi\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\nisystemlink-clients-uNO-BdPa-py3.13\\Lib\\site-packages\\_pytest\\runner.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.fixtures' from 'C:\\Users\\sam.rishi\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\nisystemlink-clients-uNO-BdPa-py3.13\\Lib\\site-packages\\_pytest\\fixtures.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.helpconfig' from 'C:\\Users\\sam.rishi\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\nisystemlink-clients-uNO-BdPa-py3.13\\Lib\\site-packages\\_pytest\\helpconfig.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python' from 'C:\\Users\\sam.rishi\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\nisystemlink-clients-uNO-BdPa-py3.13\\Lib\\site-packages\\_pytest\\python.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.terminal' from 'C:\\Users\\sam.rishi\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\nisystemlink-clients-uNO-BdPa-py3.13\\Lib\\site-packages\\_pytest\\terminal.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.debugging' from 'C:\\Users\\sam.rishi\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\nisystemlink-clients-uNO-BdPa-py3.13\\Lib\\site-packages\\_pytest\\debugging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unittest' from 'C:\\Users\\sam.rishi\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\nisystemlink-clients-uNO-BdPa-py3.13\\Lib\\site-packages\\_pytest\\unittest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.capture' from 'C:\\Users\\sam.rishi\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\nisystemlink-clients-uNO-BdPa-py3.13\\Lib\\site-packages\\_pytest\\capture.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.skipping' from 'C:\\Users\\sam.rishi\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\nisystemlink-clients-uNO-BdPa-py3.13\\Lib\\site-packages\\_pytest\\skipping.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.legacypath' from 'C:\\Users\\sam.rishi\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\nisystemlink-clients-uNO-BdPa-py3.13\\Lib\\site-packages\\_pytest\\legacypath.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.tmpdir' from 'C:\\Users\\sam.rishi\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\nisystemlink-clients-uNO-BdPa-py3.13\\Lib\\site-packages\\_pytest\\tmpdir.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.monkeypatch' from 'C:\\Users\\sam.rishi\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\nisystemlink-clients-uNO-BdPa-py3.13\\Lib\\site-packages\\_pytest\\monkeypatch.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.recwarn' from 'C:\\Users\\sam.rishi\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\nisystemlink-clients-uNO-BdPa-py3.13\\Lib\\site-packages\\_pytest\\recwarn.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.pastebin' from 'C:\\Users\\sam.rishi\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\nisystemlink-clients-uNO-BdPa-py3.13\\Lib\\site-packages\\_pytest\\pastebin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.nose' from 'C:\\Users\\sam.rishi\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\nisystemlink-clients-uNO-BdPa-py3.13\\Lib\\site-packages\\_pytest\\nose.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.assertion' from 'C:\\Users\\sam.rishi\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\nisystemlink-clients-uNO-BdPa-py3.13\\Lib\\site-packages\\_pytest\\assertion\\__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.junitxml' from 'C:\\Users\\sam.rishi\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\nisystemlink-clients-uNO-BdPa-py3.13\\Lib\\site-packages\\_pytest\\junitxml.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.doctest' from 'C:\\Users\\sam.rishi\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\nisystemlink-clients-uNO-BdPa-py3.13\\Lib\\site-packages\\_pytest\\doctest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.cacheprovider' from 'C:\\Users\\sam.rishi\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\nisystemlink-clients-uNO-BdPa-py3.13\\Lib\\site-packages\\_pytest\\cacheprovider.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.freeze_support' from 'C:\\Users\\sam.rishi\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\nisystemlink-clients-uNO-BdPa-py3.13\\Lib\\site-packages\\_pytest\\freeze_support.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setuponly' from 'C:\\Users\\sam.rishi\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\nisystemlink-clients-uNO-BdPa-py3.13\\Lib\\site-packages\\_pytest\\setuponly.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setupplan' from 'C:\\Users\\sam.rishi\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\nisystemlink-clients-uNO-BdPa-py3.13\\Lib\\site-packages\\_pytest\\setupplan.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.stepwise' from 'C:\\Users\\sam.rishi\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\nisystemlink-clients-uNO-BdPa-py3.13\\Lib\\site-packages\\_pytest\\stepwise.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.warnings' from 'C:\\Users\\sam.rishi\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\nisystemlink-clients-uNO-BdPa-py3.13\\Lib\\site-packages\\_pytest\\warnings.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.logging' from 'C:\\Users\\sam.rishi\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\nisystemlink-clients-uNO-BdPa-py3.13\\Lib\\site-packages\\_pytest\\logging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.reports' from 'C:\\Users\\sam.rishi\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\nisystemlink-clients-uNO-BdPa-py3.13\\Lib\\site-packages\\_pytest\\reports.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python_path' from 'C:\\Users\\sam.rishi\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\nisystemlink-clients-uNO-BdPa-py3.13\\Lib\\site-packages\\_pytest\\python_path.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unraisableexception' from 'C:\\Users\\sam.rishi\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\nisystemlink-clients-uNO-BdPa-py3.13\\Lib\\site-packages\\_pytest\\unraisableexception.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.threadexception' from 'C:\\Users\\sam.rishi\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\nisystemlink-clients-uNO-BdPa-py3.13\\Lib\\site-packages\\_pytest\\threadexception.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.faulthandler' from 'C:\\Users\\sam.rishi\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\nisystemlink-clients-uNO-BdPa-py3.13\\Lib\\site-packages\\_pytest\\faulthandler.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'anyio.pytest_plugin' from 'C:\\Users\\sam.rishi\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\nisystemlink-clients-uNO-BdPa-py3.13\\Lib\\site-packages\\anyio\\pytest_plugin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_asyncio.plugin' from 'C:\\Users\\sam.rishi\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\nisystemlink-clients-uNO-BdPa-py3.13\\Lib\\site-packages\\pytest_asyncio\\plugin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <CaptureManager _method='fd' _global_capturing=<MultiCapture out=<FDCapture 1 oldfd=9 _state='suspended' tmpfile=<EncodedFile name='<tempfile._TemporaryFileWrapper object at 0x0000013CD80C7380>' mode='r+' encoding='utf-8'>> err=<FDCapture 2 oldfd=11 _state='suspended' tmpfile=<EncodedFile name='<tempfile._TemporaryFileWrapper object at 0x0000013CD819C190>' mode='r+' encoding='utf-8'>> in_=<FDCapture 0 oldfd=7 _state='started' tmpfile=<_io.TextIOWrapper name='nul' mode='r' encoding='utf-8'>> _state='suspended' _in_suspended=False> _capture_fixture=None>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'conftest' from 'D:\\nisystemlink-clients-python\\conftest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <Session nisystemlink-clients-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x0000013CD80C5550>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x0000013CD8AEEE40>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <class '_pytest.legacypath.LegacyTmpdirPlugin'>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.terminal.TerminalReporter object at 0x0000013CD8BFC1A0>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.logging.LoggingPlugin object at 0x0000013CD8BFC6E0>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.fixtures.FixtureManager object at 0x0000013CD8BFD010>
          manager: <_pytest.config.PytestPluginManager object at 0x0000013CD65D5A90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_report_header [hook]
          config: <_pytest.config.Config object at 0x0000013CD65D6270>
          start_path: D:\nisystemlink-clients-python\tests\integration\assetManagement
          startdir: D:\nisystemlink-clients-python\tests\integration\assetManagement
      early skip of rewriting module: importlib.metadata._adapters [assertion]
      early skip of rewriting module: email.message [assertion]
      early skip of rewriting module: quopri [assertion]
      early skip of rewriting module: email.utils [assertion]
      early skip of rewriting module: email._parseaddr [assertion]
      early skip of rewriting module: email.errors [assertion]
      early skip of rewriting module: email._policybase [assertion]
      early skip of rewriting module: email.header [assertion]
      early skip of rewriting module: email.quoprimime [assertion]
      early skip of rewriting module: email.base64mime [assertion]
      early skip of rewriting module: email.charset [assertion]
      early skip of rewriting module: email.encoders [assertion]
      early skip of rewriting module: email._encoded_words [assertion]
      early skip of rewriting module: email.iterators [assertion]
      early skip of rewriting module: importlib.metadata._text [assertion]
      early skip of rewriting module: email.parser [assertion]
      early skip of rewriting module: email.feedparser [assertion]
      finish pytest_report_header --> [['asyncio: mode=Mode.STRICT'], ['rootdir: D:\\nisystemlink-clients-python', 'configfile: pyproject.toml', 'plugins: anyio-4.6.2.post1, asyncio-0.20.3'], ['using: pytest-7.4.4', 'setuptools registered plugins:', '  anyio-4.6.2.post1 at C:\\Users\\sam.rishi\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\nisystemlink-clients-uNO-BdPa-py3.13\\Lib\\site-packages\\anyio\\pytest_plugin.py', '  pytest-asyncio-0.20.3 at C:\\Users\\sam.rishi\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\nisystemlink-clients-uNO-BdPa-py3.13\\Lib\\site-packages\\pytest_asyncio\\plugin.py']] [hook]
    finish pytest_sessionstart --> [] [hook]
    pytest_collection [hook]
        session: <Session nisystemlink-clients-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
    perform_collect <Session nisystemlink-clients-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0> ['D:\\nisystemlink-clients-python\\tests\\integration\\assetManagement'] [collection]
        pytest_collectstart [hook]
            collector: <Session nisystemlink-clients-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        finish pytest_collectstart --> [] [hook]
        pytest_make_collect_report [hook]
            collector: <Session nisystemlink-clients-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        processing argument (WindowsPath('D:/nisystemlink-clients-python/tests/integration/assetManagement'), []) [collection]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x0000013CD65D6270>
                collection_path: D:\nisystemlink-clients-python\tests\integration\assetManagement\__init__.py
                path: D:\nisystemlink-clients-python\tests\integration\assetManagement\__init__.py
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session nisystemlink-clients-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: D:\nisystemlink-clients-python\tests\integration\assetManagement\__init__.py
                path: D:\nisystemlink-clients-python\tests\integration\assetManagement\__init__.py
              pytest_pycollect_makemodule [hook]
                  parent: <Session nisystemlink-clients-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                  module_path: D:\nisystemlink-clients-python\tests\integration\assetManagement\__init__.py
                  path: D:\nisystemlink-clients-python\tests\integration\assetManagement\__init__.py
              finish pytest_pycollect_makemodule --> <Package assetManagement> [hook]
            finish pytest_collect_file --> [<Package assetManagement>] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x0000013CD65D6270>
                collection_path: D:\nisystemlink-clients-python\tests\integration\__init__.py
                path: D:\nisystemlink-clients-python\tests\integration\__init__.py
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session nisystemlink-clients-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: D:\nisystemlink-clients-python\tests\integration\__init__.py
                path: D:\nisystemlink-clients-python\tests\integration\__init__.py
              pytest_pycollect_makemodule [hook]
                  parent: <Session nisystemlink-clients-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                  module_path: D:\nisystemlink-clients-python\tests\integration\__init__.py
                  path: D:\nisystemlink-clients-python\tests\integration\__init__.py
              finish pytest_pycollect_makemodule --> <Package integration> [hook]
            finish pytest_collect_file --> [<Package integration>] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x0000013CD65D6270>
                collection_path: D:\nisystemlink-clients-python\tests\__init__.py
                path: D:\nisystemlink-clients-python\tests\__init__.py
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session nisystemlink-clients-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: D:\nisystemlink-clients-python\tests\__init__.py
                path: D:\nisystemlink-clients-python\tests\__init__.py
              pytest_pycollect_makemodule [hook]
                  parent: <Session nisystemlink-clients-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                  module_path: D:\nisystemlink-clients-python\tests\__init__.py
                  path: D:\nisystemlink-clients-python\tests\__init__.py
              finish pytest_pycollect_makemodule --> <Package tests> [hook]
            finish pytest_collect_file --> [<Package tests>] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x0000013CD65D6270>
                collection_path: D:\nisystemlink-clients-python\tests\integration\assetManagement\__init__.py
                path: D:\nisystemlink-clients-python\tests\integration\assetManagement\__init__.py
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session nisystemlink-clients-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: D:\nisystemlink-clients-python\tests\integration\assetManagement\__init__.py
                path: D:\nisystemlink-clients-python\tests\integration\assetManagement\__init__.py
              pytest_pycollect_makemodule [hook]
                  parent: <Session nisystemlink-clients-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                  module_path: D:\nisystemlink-clients-python\tests\integration\assetManagement\__init__.py
                  path: D:\nisystemlink-clients-python\tests\integration\assetManagement\__init__.py
              finish pytest_pycollect_makemodule --> <Package assetManagement> [hook]
            finish pytest_collect_file --> [<Package assetManagement>] [hook]
        finish pytest_make_collect_report --> <CollectReport '' lenresult=1 outcome='passed'> [hook]
        pytest_collectreport [hook]
            report: <CollectReport '' lenresult=1 outcome='passed'>
        finish pytest_collectreport --> [] [hook]
    genitems <Package assetManagement> [collection]
      pytest_collectstart [hook]
          collector: <Package assetManagement>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Package assetManagement>
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x0000013CD65D6270>
            collection_path: D:\nisystemlink-clients-python\tests\integration\assetManagement\pytestdebug.log
            path: D:\nisystemlink-clients-python\tests\integration\assetManagement\pytestdebug.log
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package assetManagement>
            file_path: D:\nisystemlink-clients-python\tests\integration\assetManagement\pytestdebug.log
            path: D:\nisystemlink-clients-python\tests\integration\assetManagement\pytestdebug.log
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x0000013CD65D6270>
            collection_path: D:\nisystemlink-clients-python\tests\integration\assetManagement\test_asset_management.py
            path: D:\nisystemlink-clients-python\tests\integration\assetManagement\test_asset_management.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package assetManagement>
            file_path: D:\nisystemlink-clients-python\tests\integration\assetManagement\test_asset_management.py
            path: D:\nisystemlink-clients-python\tests\integration\assetManagement\test_asset_management.py
          pytest_pycollect_makemodule [hook]
              parent: <Package assetManagement>
              module_path: D:\nisystemlink-clients-python\tests\integration\assetManagement\test_asset_management.py
              path: D:\nisystemlink-clients-python\tests\integration\assetManagement\test_asset_management.py
          finish pytest_pycollect_makemodule --> <Module test_asset_management.py> [hook]
        finish pytest_collect_file --> [<Module test_asset_management.py>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/integration/assetManagement/__init__.py' lenresult=1 outcome='passed'> [hook]
    genitems <Module test_asset_management.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_asset_management.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_asset_management.py>
      early skip of rewriting module: tests [assertion]
      early skip of rewriting module: tests.integration [assertion]
      find_module called for: tests.integration.assetManagement [assertion]
      find_module called for: tests.integration.assetManagement.test_asset_management [assertion]
      matched test file 'D:\\nisystemlink-clients-python\\tests\\integration\\assetManagement\\test_asset_management.py' [assertion]
      found cached rewritten pyc for D:\nisystemlink-clients-python\tests\integration\assetManagement\test_asset_management.py [assertion]
      early skip of rewriting module: xmlrpc [assertion]
      early skip of rewriting module: xmlrpc.client [assertion]
      early skip of rewriting module: http [assertion]
      early skip of rewriting module: http.client [assertion]
      early skip of rewriting module: xml.parsers [assertion]
      early skip of rewriting module: xml.parsers.expat [assertion]
      early skip of rewriting module: gzip [assertion]
      find_module called for: nisystemlink.clients.assetManagement [assertion]
      early skip of rewriting module: nisystemlink.clients.assetManagement._asset_management_client [assertion]
      early skip of rewriting module: uplink [assertion]
      early skip of rewriting module: uplink.__about__ [assertion]
      early skip of rewriting module: uplink._extras [assertion]
      early skip of rewriting module: pkg_resources [assertion]
      early skip of rewriting module: pkgutil [assertion]
      early skip of rewriting module: plistlib [assertion]
      early skip of rewriting module: packaging [assertion]
      early skip of rewriting module: packaging.markers [assertion]
      early skip of rewriting module: packaging._parser [assertion]
      early skip of rewriting module: packaging._tokenizer [assertion]
      early skip of rewriting module: packaging.specifiers [assertion]
      early skip of rewriting module: packaging.utils [assertion]
      early skip of rewriting module: packaging.tags [assertion]
      early skip of rewriting module: sysconfig [assertion]
      early skip of rewriting module: packaging._manylinux [assertion]
      early skip of rewriting module: packaging._elffile [assertion]
      early skip of rewriting module: packaging._musllinux [assertion]
      early skip of rewriting module: packaging.version [assertion]
      early skip of rewriting module: packaging._structures [assertion]
      early skip of rewriting module: packaging.requirements [assertion]
      early skip of rewriting module: jaraco [assertion]
      early skip of rewriting module: jaraco.text [assertion]
      early skip of rewriting module: jaraco.functools [assertion]
      early skip of rewriting module: more_itertools [assertion]
      early skip of rewriting module: more_itertools.more [assertion]
      early skip of rewriting module: queue [assertion]
      early skip of rewriting module: _queue [assertion]
      early skip of rewriting module: more_itertools.recipes [assertion]
      early skip of rewriting module: jaraco.context [assertion]
      early skip of rewriting module: urllib.request [assertion]
      early skip of rewriting module: hashlib [assertion]
      early skip of rewriting module: _hashlib [assertion]
      early skip of rewriting module: _blake2 [assertion]
      early skip of rewriting module: urllib.error [assertion]
      early skip of rewriting module: urllib.response [assertion]
      early skip of rewriting module: nturl2path [assertion]
      early skip of rewriting module: tarfile [assertion]
      early skip of rewriting module: pwd [assertion]
      early skip of rewriting module: grp [assertion]
      early skip of rewriting module: importlib.resources._adapters [assertion]
      early skip of rewriting module: importlib.readers [assertion]
      early skip of rewriting module: importlib.resources.readers [assertion]
      early skip of rewriting module: importlib.resources._itertools [assertion]
      early skip of rewriting module: platformdirs [assertion]
      early skip of rewriting module: platformdirs.api [assertion]
      early skip of rewriting module: platformdirs.version [assertion]
      early skip of rewriting module: platformdirs.windows [assertion]
      early skip of rewriting module: uplink.returns [assertion]
      early skip of rewriting module: uplink.decorators [assertion]
      early skip of rewriting module: uplink.arguments [assertion]
      early skip of rewriting module: uplink.exceptions [assertion]
      early skip of rewriting module: uplink.hooks [assertion]
      early skip of rewriting module: uplink.compat [assertion]
      early skip of rewriting module: six [assertion]
      early skip of rewriting module: uplink.interfaces [assertion]
      early skip of rewriting module: uplink.utils [assertion]
      early skip of rewriting module: uritemplate [assertion]
      early skip of rewriting module: uritemplate.api [assertion]
      early skip of rewriting module: uritemplate.variable [assertion]
      early skip of rewriting module: uritemplate.orderedset [assertion]
      early skip of rewriting module: uritemplate.template [assertion]
      early skip of rewriting module: uplink.converters [assertion]
      early skip of rewriting module: uplink.converters.keys [assertion]
      early skip of rewriting module: uplink.converters.interfaces [assertion]
      early skip of rewriting module: uplink.converters.register [assertion]
      early skip of rewriting module: uplink.converters.standard [assertion]
      early skip of rewriting module: uplink.converters.marshmallow_ [assertion]
      early skip of rewriting module: marshmallow [assertion]
      early skip of rewriting module: uplink.converters.pydantic_ [assertion]
      early skip of rewriting module: uplink.converters.typing_ [assertion]
      early skip of rewriting module: uplink.helpers [assertion]
      early skip of rewriting module: uplink.clients [assertion]
      early skip of rewriting module: uplink.clients.interfaces [assertion]
      early skip of rewriting module: uplink.clients.exceptions [assertion]
      early skip of rewriting module: uplink.clients.io [assertion]
      early skip of rewriting module: uplink.clients.io.interfaces [assertion]
      early skip of rewriting module: uplink.clients.io.execution [assertion]
      early skip of rewriting module: uplink.clients.io.state [assertion]
      early skip of rewriting module: uplink.clients.io.templates [assertion]
      early skip of rewriting module: uplink.clients.io.transitions [assertion]
      early skip of rewriting module: uplink.clients.io.blocking_strategy [assertion]
      early skip of rewriting module: uplink.clients.io.asyncio_strategy [assertion]
      early skip of rewriting module: uplink.clients.io.twisted_strategy [assertion]
      early skip of rewriting module: twisted [assertion]
      early skip of rewriting module: uplink.clients.register [assertion]
      early skip of rewriting module: uplink.clients.requests_ [assertion]
      early skip of rewriting module: requests [assertion]
      early skip of rewriting module: urllib3 [assertion]
      early skip of rewriting module: urllib3.exceptions [assertion]
      early skip of rewriting module: urllib3._base_connection [assertion]
      early skip of rewriting module: urllib3.util [assertion]
      early skip of rewriting module: urllib3.util.connection [assertion]
      early skip of rewriting module: urllib3.util.timeout [assertion]
      early skip of rewriting module: urllib3.util.request [assertion]
      early skip of rewriting module: urllib3.util.util [assertion]
      early skip of rewriting module: brotlicffi [assertion]
      early skip of rewriting module: brotli [assertion]
      early skip of rewriting module: zstandard [assertion]
      early skip of rewriting module: urllib3.util.response [assertion]
      early skip of rewriting module: urllib3.util.retry [assertion]
      early skip of rewriting module: urllib3.util.ssl_ [assertion]
      early skip of rewriting module: hmac [assertion]
      early skip of rewriting module: urllib3.util.url [assertion]
      early skip of rewriting module: urllib3.util.ssltransport [assertion]
      early skip of rewriting module: urllib3.util.wait [assertion]
      early skip of rewriting module: urllib3._collections [assertion]
      early skip of rewriting module: urllib3._version [assertion]
      early skip of rewriting module: urllib3.connectionpool [assertion]
      early skip of rewriting module: urllib3._request_methods [assertion]
      early skip of rewriting module: urllib3.filepost [assertion]
      early skip of rewriting module: urllib3.fields [assertion]
      early skip of rewriting module: mimetypes [assertion]
      early skip of rewriting module: urllib3.response [assertion]
      early skip of rewriting module: brotlicffi [assertion]
      early skip of rewriting module: brotli [assertion]
      early skip of rewriting module: zstandard [assertion]
      early skip of rewriting module: urllib3.connection [assertion]
      early skip of rewriting module: urllib3.http2 [assertion]
      early skip of rewriting module: urllib3.http2.probe [assertion]
      early skip of rewriting module: urllib3.util.ssl_match_hostname [assertion]
      early skip of rewriting module: urllib3.util.proxy [assertion]
      early skip of rewriting module: urllib3.poolmanager [assertion]
      early skip of rewriting module: requests.exceptions [assertion]
      early skip of rewriting module: requests.compat [assertion]
      early skip of rewriting module: chardet [assertion]
      early skip of rewriting module: charset_normalizer [assertion]
      early skip of rewriting module: charset_normalizer.api [assertion]
      early skip of rewriting module: charset_normalizer.cd [assertion]
      early skip of rewriting module: charset_normalizer.constant [assertion]
      early skip of rewriting module: charset_normalizer.md [assertion]
      early skip of rewriting module: charset_normalizer.md__mypyc [assertion]
      early skip of rewriting module: charset_normalizer.utils [assertion]
      early skip of rewriting module: _multibytecodec [assertion]
      early skip of rewriting module: charset_normalizer.models [assertion]
      early skip of rewriting module: charset_normalizer.legacy [assertion]
      early skip of rewriting module: charset_normalizer.version [assertion]
      early skip of rewriting module: simplejson [assertion]
      early skip of rewriting module: http.cookiejar [assertion]
      early skip of rewriting module: calendar [assertion]
      early skip of rewriting module: http.cookies [assertion]
      early skip of rewriting module: chardet [assertion]
      early skip of rewriting module: requests.packages [assertion]
      early skip of rewriting module: idna [assertion]
      early skip of rewriting module: idna.core [assertion]
      early skip of rewriting module: idna.idnadata [assertion]
      early skip of rewriting module: idna.intranges [assertion]
      early skip of rewriting module: idna.package_data [assertion]
      early skip of rewriting module: requests.utils [assertion]
      early skip of rewriting module: requests.certs [assertion]
      early skip of rewriting module: certifi [assertion]
      early skip of rewriting module: certifi.core [assertion]
      early skip of rewriting module: requests.__version__ [assertion]
      early skip of rewriting module: requests._internal_utils [assertion]
      early skip of rewriting module: requests.cookies [assertion]
      early skip of rewriting module: requests.structures [assertion]
      early skip of rewriting module: requests.api [assertion]
      early skip of rewriting module: requests.sessions [assertion]
      early skip of rewriting module: requests.adapters [assertion]
      early skip of rewriting module: requests.auth [assertion]
      early skip of rewriting module: requests.models [assertion]
      early skip of rewriting module: encodings.idna [assertion]
      early skip of rewriting module: stringprep [assertion]
      early skip of rewriting module: requests.hooks [assertion]
      early skip of rewriting module: requests.status_codes [assertion]
      early skip of rewriting module: urllib3.contrib [assertion]
      early skip of rewriting module: urllib3.contrib.socks [assertion]
      early skip of rewriting module: socks [assertion]
      early skip of rewriting module: uplink.clients.twisted_ [assertion]
      early skip of rewriting module: twisted [assertion]
      early skip of rewriting module: uplink.clients.aiohttp_ [assertion]
      early skip of rewriting module: aiohttp [assertion]
      early skip of rewriting module: uplink.types [assertion]
      early skip of rewriting module: uplink.builder [assertion]
      early skip of rewriting module: uplink.auth [assertion]
      early skip of rewriting module: uplink.session [assertion]
      early skip of rewriting module: uplink.commands [assertion]
      early skip of rewriting module: uplink.models [assertion]
      early skip of rewriting module: uplink.ratelimit [assertion]
      early skip of rewriting module: uplink.retry [assertion]
      early skip of rewriting module: uplink.retry.retry [assertion]
      early skip of rewriting module: uplink.retry.when [assertion]
      early skip of rewriting module: uplink.retry._helpers [assertion]
      early skip of rewriting module: uplink.retry.stop [assertion]
      early skip of rewriting module: uplink.retry.backoff [assertion]
      early skip of rewriting module: nisystemlink.clients.core._uplink._base_client [assertion]
      early skip of rewriting module: nisystemlink.clients.core._uplink._methods [assertion]
      early skip of rewriting module: nisystemlink.clients.assetManagement.models [assertion]
      early skip of rewriting module: nisystemlink.clients.assetManagement.models._assets_response [assertion]
      early skip of rewriting module: nisystemlink.clients.assetManagement.models._error [assertion]
      early skip of rewriting module: nisystemlink.clients.assetManagement.models._asset [assertion]
      early skip of rewriting module: nisystemlink.clients.assetManagement.models._asset_summary_response [assertion]
      early skip of rewriting module: nisystemlink.clients.assetManagement.models._asset_create [assertion]
      early skip of rewriting module: nisystemlink.clients.assetManagement.models._query_assets [assertion]
      early skip of rewriting module: nisystemlink.clients.assetManagement.models._export_assets [assertion]
      early skip of rewriting module: nisystemlink.clients.assetManagement.models._asset_update [assertion]
      early skip of rewriting module: nisystemlink.clients.assetManagement.models._query_location [assertion]
      early skip of rewriting module: nisystemlink.clients.assetManagement.models._asset_delete [assertion]
      early skip of rewriting module: nisystemlink.clients.assetManagement.models._link_files [assertion]
      early skip of rewriting module: nisystemlink.clients.assetManagement.models._no_content [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_asset_management.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_asset_management.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from 'C:\\Users\\sam.rishi\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\nisystemlink-clients-uNO-BdPa-py3.13\\Lib\\site-packages\\_pytest\\assertion\\rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_asset_management.py>
            name: List
            obj: typing.List
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_asset_management.py>
            name: DateTime
            obj: <class 'xmlrpc.client.DateTime'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_asset_management.py>
            name: pytest
            obj: <module 'pytest' from 'C:\\Users\\sam.rishi\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\nisystemlink-clients-uNO-BdPa-py3.13\\Lib\\site-packages\\pytest\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_asset_management.py>
            name: AssetManagementClient
            obj: <class 'nisystemlink.clients.assetManagement._asset_management_client.AssetManagementClient'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_asset_management.py>
            name: HttpConfiguration
            obj: <class 'nisystemlink.clients.core._http_configuration.HttpConfiguration'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_asset_management.py>
            name: Asset
            obj: <class 'nisystemlink.clients.assetManagement.models._asset.Asset'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_asset_management.py>
            name: AssetsResponse
            obj: <class 'nisystemlink.clients.assetManagement.models._assets_response.AssetsResponse'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_asset_management.py>
            name: CreateAssetsRequest
            obj: <class 'nisystemlink.clients.assetManagement.models._asset_create.CreateAssetsRequest'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_asset_management.py>
            name: AssetsCreatePartialSuccessResponse
            obj: <class 'nisystemlink.clients.assetManagement.models._asset_create.AssetsCreatePartialSuccessResponse'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_asset_management.py>
            name: DeleteAssetsRequest
            obj: <class 'nisystemlink.clients.assetManagement.models._asset_delete.DeleteAssetsRequest'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_asset_management.py>
            name: DeleteAssetsResponse
            obj: <class 'nisystemlink.clients.assetManagement.models._asset_delete.DeleteAssetsResponse'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_asset_management.py>
            name: AssetSummaryResponse
            obj: <class 'nisystemlink.clients.assetManagement.models._asset_summary_response.AssetSummaryResponse'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_asset_management.py>
            name: QueryAssetRequest
            obj: <class 'nisystemlink.clients.assetManagement.models._query_assets.QueryAssetRequest'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_asset_management.py>
            name: ExportAssetsRequest
            obj: <class 'nisystemlink.clients.assetManagement.models._export_assets.ExportAssetsRequest'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_asset_management.py>
            name: ExportAssetsResponse
            obj: <class 'nisystemlink.clients.assetManagement.models._export_assets.ExportAssetsResponse'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_asset_management.py>
            name: UpdateAssetsRequest
            obj: <class 'nisystemlink.clients.assetManagement.models._asset_update.UpdateAssetsRequest'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_asset_management.py>
            name: UpdateAssetsPartialSuccessResponse
            obj: <class 'nisystemlink.clients.assetManagement.models._asset_update.UpdateAssetsPartialSuccessResponse'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_asset_management.py>
            name: QueryLocationHistoryRequest
            obj: <class 'nisystemlink.clients.assetManagement.models._query_location.QueryLocationHistoryRequest'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_asset_management.py>
            name: ConnectionHistoryResponse
            obj: <class 'nisystemlink.clients.assetManagement.models._query_location.ConnectionHistoryResponse'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_asset_management.py>
            name: LinkFilesRequest
            obj: <class 'nisystemlink.clients.assetManagement.models._link_files.LinkFilesRequest'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_asset_management.py>
            name: LinkFilesPartialSuccessResponse
            obj: <class 'nisystemlink.clients.assetManagement.models._link_files.LinkFilesPartialSuccessResponse'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_asset_management.py>
            name: NoContentResult
            obj: <class 'nisystemlink.clients.assetManagement.models._no_content.NoContentResult'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_asset_management.py>
            name: AssetCreate
            obj: <class 'nisystemlink.clients.assetManagement.models._asset_create.AssetCreate'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_asset_management.py>
            name: AssetBusType
            obj: <enum 'AssetBusType'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_asset_management.py>
            name: AssetType
            obj: <enum 'AssetType'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_asset_management.py>
            name: AssetDiscoveryType
            obj: <enum 'AssetDiscoveryType'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_asset_management.py>
            name: SelfCalibration
            obj: <class 'nisystemlink.clients.assetManagement.models._asset.SelfCalibration'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_asset_management.py>
            name: AssetLocation
            obj: <class 'nisystemlink.clients.assetManagement.models._asset.AssetLocation'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_asset_management.py>
            name: AssetPresenceWithSystemConnection
            obj: <class 'nisystemlink.clients.assetManagement.models._asset.AssetPresenceWithSystemConnection'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_asset_management.py>
            name: AssetPresence
            obj: <enum 'AssetPresence'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_asset_management.py>
            name: ExternalCalibration
            obj: <class 'nisystemlink.clients.assetManagement.models._asset.ExternalCalibration'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_asset_management.py>
            name: ResponseFormat
            obj: <enum 'ResponseFormat'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_asset_management.py>
            name: Destination
            obj: <enum 'Destination'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_asset_management.py>
            name: AssetUpdate
            obj: <class 'nisystemlink.clients.assetManagement.models._asset_update.AssetUpdate'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_asset_management.py>
            name: LocationResponseFormat
            obj: <enum 'ResponseFormat'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_asset_management.py>
            name: LocationDestination
            obj: <enum 'Destination'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_asset_management.py>
            name: create_assets_request
            obj: <function create_assets_request at 0x0000013CD8CF8220>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_asset_management.py>
            name: client
            obj: <function client at 0x0000013CD8CF8360>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_asset_management.py>
            name: TestAssetManagement
            obj: <class 'tests.integration.assetManagement.test_asset_management.TestAssetManagement'>
        finish pytest_pycollect_makeitem --> <Class TestAssetManagement> [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/integration/assetManagement/test_asset_management.py' lenresult=1 outcome='passed'> [hook]
    genitems <Class TestAssetManagement> [collection]
      pytest_collectstart [hook]
          collector: <Class TestAssetManagement>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Class TestAssetManagement>
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAssetManagement>
            name: test__get_assets__returns_all_assets
            obj: <function TestAssetManagement.test__get_assets__returns_all_assets at 0x0000013CD92A4AE0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x0000013CD921AE40>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test__get_assets__returns_all_assets>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAssetManagement>
            name: test__get_assets_with_specific_take_value__returns_specific_number_of_assets
            obj: <function TestAssetManagement.test__get_assets_with_specific_take_value__returns_specific_number_of_assets at 0x0000013CD92A4B80>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x0000013CD92B1450>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test__get_assets_with_specific_take_value__returns_specific_number_of_assets>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAssetManagement>
            name: test__get_assets_summary__returs_assets_summary
            obj: <function TestAssetManagement.test__get_assets_summary__returs_assets_summary at 0x0000013CD92A4C20>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x0000013CD92B1450>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test__get_assets_summary__returs_assets_summary>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAssetManagement>
            name: test__get_asset_by_correct_id__returns_the_asset
            obj: <function TestAssetManagement.test__get_asset_by_correct_id__returns_the_asset at 0x0000013CD92A4CC0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x0000013CD923AC40>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test__get_asset_by_correct_id__returns_the_asset>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAssetManagement>
            name: test__get_asset_by_incorrect_id__does_not_return_the_asset
            obj: <function TestAssetManagement.test__get_asset_by_incorrect_id__does_not_return_the_asset at 0x0000013CD92A4D60>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x0000013CD923AC40>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test__get_asset_by_incorrect_id__does_not_return_the_asset>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAssetManagement>
            name: test__create_one_asset__one_asset_gets_created
            obj: <function TestAssetManagement.test__create_one_asset__one_asset_gets_created at 0x0000013CD92A4E00>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x0000013CD92B84D0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test__create_one_asset__one_asset_gets_created>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAssetManagement>
            name: test__create_multiple_assets__all_succeed
            obj: <function TestAssetManagement.test__create_multiple_assets__all_succeed at 0x0000013CD92A4EA0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x0000013CD92AD590>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test__create_multiple_assets__all_succeed>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAssetManagement>
            name: test__query_assets_with_correct_id__returns_assets
            obj: <function TestAssetManagement.test__query_assets_with_correct_id__returns_assets at 0x0000013CD92A4F40>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x0000013CD92AD590>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test__query_assets_with_correct_id__returns_assets>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAssetManagement>
            name: test__query_assets_with_incorrect_id__does_not_return_assets
            obj: <function TestAssetManagement.test__query_assets_with_incorrect_id__does_not_return_assets at 0x0000013CD92A4FE0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x0000013CD9297650>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test__query_assets_with_incorrect_id__does_not_return_assets>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAssetManagement>
            name: test__export_assets__returns_file_ids
            obj: <function TestAssetManagement.test__export_assets__returns_file_ids at 0x0000013CD92A5080>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x0000013CD9297650>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test__export_assets__returns_file_ids>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAssetManagement>
            name: test__update_assets_with_correct_id__updates_assets
            obj: <function TestAssetManagement.test__update_assets_with_correct_id__updates_assets at 0x0000013CD92A5120>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x0000013CD928FA70>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test__update_assets_with_correct_id__updates_assets>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAssetManagement>
            name: test__update_assets_with_incorrect_id__does_not_update_assets
            obj: <function TestAssetManagement.test__update_assets_with_incorrect_id__does_not_update_assets at 0x0000013CD92A51C0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x0000013CD928FA70>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test__update_assets_with_incorrect_id__does_not_update_assets>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAssetManagement>
            name: test__query_location_with_correct_id__returns_location_history
            obj: <function TestAssetManagement.test__query_location_with_correct_id__returns_location_history at 0x0000013CD92A5260>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x0000013CD92AAF90>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test__query_location_with_correct_id__returns_location_history>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAssetManagement>
            name: test__query_location_with_incorrect_id__does_not_return_location_history
            obj: <function TestAssetManagement.test__query_location_with_incorrect_id__does_not_return_location_history at 0x0000013CD92A5300>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x0000013CD92AB230>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test__query_location_with_incorrect_id__does_not_return_location_history>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAssetManagement>
            name: test__delete_assets_with_Correct_id__deletes_assets
            obj: <function TestAssetManagement.test__delete_assets_with_Correct_id__deletes_assets at 0x0000013CD92A53A0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x0000013CD921D300>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test__delete_assets_with_Correct_id__deletes_assets>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAssetManagement>
            name: test__delete_assets_with_incorrect_id__fails
            obj: <function TestAssetManagement.test__delete_assets_with_incorrect_id__fails at 0x0000013CD92A5440>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x0000013CD90F7B90>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test__delete_assets_with_incorrect_id__fails>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAssetManagement>
            name: test__link_files_with_correct_asset_id__links_files
            obj: <function TestAssetManagement.test__link_files_with_correct_asset_id__links_files at 0x0000013CD92A54E0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x0000013CD90F7B90>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test__link_files_with_correct_asset_id__links_files>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAssetManagement>
            name: test__link_files_with_incorrect_asset_id__does_not_link_files
            obj: <function TestAssetManagement.test__link_files_with_incorrect_asset_id__does_not_link_files at 0x0000013CD92A5580>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x0000013CD916FC20>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test__link_files_with_incorrect_asset_id__does_not_link_files>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAssetManagement>
            name: test__unlink_files_with_correct_asset_id__unlinks_files
            obj: <function TestAssetManagement.test__unlink_files_with_correct_asset_id__unlinks_files at 0x0000013CD92A5760>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x0000013CD916FC20>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test__unlink_files_with_correct_asset_id__unlinks_files>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAssetManagement>
            name: test__unlink_files_with_incorrect_asset_id__does_not_unlink_files
            obj: <function TestAssetManagement.test__unlink_files_with_incorrect_asset_id__does_not_unlink_files at 0x0000013CD92A58A0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x0000013CD9249E50>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test__unlink_files_with_incorrect_asset_id__does_not_unlink_files>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAssetManagement>
            name: pytestmark
            obj: [Mark(name='enterprise', args=(), kwargs={}), Mark(name='integration', args=(), kwargs={})]
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement' lenresult=20 outcome='passed'> [hook]
    genitems <Function test__get_assets__returns_all_assets> [collection]
      pytest_itemcollected [hook]
          item: <Function test__get_assets__returns_all_assets>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test__get_assets_with_specific_take_value__returns_specific_number_of_assets> [collection]
      pytest_itemcollected [hook]
          item: <Function test__get_assets_with_specific_take_value__returns_specific_number_of_assets>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test__get_assets_summary__returs_assets_summary> [collection]
      pytest_itemcollected [hook]
          item: <Function test__get_assets_summary__returs_assets_summary>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test__get_asset_by_correct_id__returns_the_asset> [collection]
      pytest_itemcollected [hook]
          item: <Function test__get_asset_by_correct_id__returns_the_asset>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test__get_asset_by_incorrect_id__does_not_return_the_asset> [collection]
      pytest_itemcollected [hook]
          item: <Function test__get_asset_by_incorrect_id__does_not_return_the_asset>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test__create_one_asset__one_asset_gets_created> [collection]
      pytest_itemcollected [hook]
          item: <Function test__create_one_asset__one_asset_gets_created>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test__create_multiple_assets__all_succeed> [collection]
      pytest_itemcollected [hook]
          item: <Function test__create_multiple_assets__all_succeed>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test__query_assets_with_correct_id__returns_assets> [collection]
      pytest_itemcollected [hook]
          item: <Function test__query_assets_with_correct_id__returns_assets>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test__query_assets_with_incorrect_id__does_not_return_assets> [collection]
      pytest_itemcollected [hook]
          item: <Function test__query_assets_with_incorrect_id__does_not_return_assets>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test__export_assets__returns_file_ids> [collection]
      pytest_itemcollected [hook]
          item: <Function test__export_assets__returns_file_ids>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test__update_assets_with_correct_id__updates_assets> [collection]
      pytest_itemcollected [hook]
          item: <Function test__update_assets_with_correct_id__updates_assets>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test__update_assets_with_incorrect_id__does_not_update_assets> [collection]
      pytest_itemcollected [hook]
          item: <Function test__update_assets_with_incorrect_id__does_not_update_assets>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test__query_location_with_correct_id__returns_location_history> [collection]
      pytest_itemcollected [hook]
          item: <Function test__query_location_with_correct_id__returns_location_history>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test__query_location_with_incorrect_id__does_not_return_location_history> [collection]
      pytest_itemcollected [hook]
          item: <Function test__query_location_with_incorrect_id__does_not_return_location_history>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test__delete_assets_with_Correct_id__deletes_assets> [collection]
      pytest_itemcollected [hook]
          item: <Function test__delete_assets_with_Correct_id__deletes_assets>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test__delete_assets_with_incorrect_id__fails> [collection]
      pytest_itemcollected [hook]
          item: <Function test__delete_assets_with_incorrect_id__fails>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test__link_files_with_correct_asset_id__links_files> [collection]
      pytest_itemcollected [hook]
          item: <Function test__link_files_with_correct_asset_id__links_files>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test__link_files_with_incorrect_asset_id__does_not_link_files> [collection]
      pytest_itemcollected [hook]
          item: <Function test__link_files_with_incorrect_asset_id__does_not_link_files>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test__unlink_files_with_correct_asset_id__unlinks_files> [collection]
      pytest_itemcollected [hook]
          item: <Function test__unlink_files_with_correct_asset_id__unlinks_files>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test__unlink_files_with_incorrect_asset_id__does_not_unlink_files> [collection]
      pytest_itemcollected [hook]
          item: <Function test__unlink_files_with_incorrect_asset_id__does_not_unlink_files>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement' lenresult=20 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/integration/assetManagement/test_asset_management.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/integration/assetManagement/__init__.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collection_modifyitems [hook]
          session: <Session nisystemlink-clients-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          config: <_pytest.config.Config object at 0x0000013CD65D6270>
          items: [<Function test__get_assets__returns_all_assets>, <Function test__get_assets_with_specific_take_value__returns_specific_number_of_assets>, <Function test__get_assets_summary__returs_assets_summary>, <Function test__get_asset_by_correct_id__returns_the_asset>, <Function test__get_asset_by_incorrect_id__does_not_return_the_asset>, <Function test__create_one_asset__one_asset_gets_created>, <Function test__create_multiple_assets__all_succeed>, <Function test__query_assets_with_correct_id__returns_assets>, <Function test__query_assets_with_incorrect_id__does_not_return_assets>, <Function test__export_assets__returns_file_ids>, <Function test__update_assets_with_correct_id__updates_assets>, <Function test__update_assets_with_incorrect_id__does_not_update_assets>, <Function test__query_location_with_correct_id__returns_location_history>, <Function test__query_location_with_incorrect_id__does_not_return_location_history>, <Function test__delete_assets_with_Correct_id__deletes_assets>, <Function test__delete_assets_with_incorrect_id__fails>, <Function test__link_files_with_correct_asset_id__links_files>, <Function test__link_files_with_incorrect_asset_id__does_not_link_files>, <Function test__unlink_files_with_correct_asset_id__unlinks_files>, <Function test__unlink_files_with_incorrect_asset_id__does_not_unlink_files>]
      finish pytest_collection_modifyitems --> [] [hook]
      pytest_collection_finish [hook]
          session: <Session nisystemlink-clients-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        pytest_report_collectionfinish [hook]
            config: <_pytest.config.Config object at 0x0000013CD65D6270>
            items: [<Function test__get_assets__returns_all_assets>, <Function test__get_assets_with_specific_take_value__returns_specific_number_of_assets>, <Function test__get_assets_summary__returs_assets_summary>, <Function test__get_asset_by_correct_id__returns_the_asset>, <Function test__get_asset_by_incorrect_id__does_not_return_the_asset>, <Function test__create_one_asset__one_asset_gets_created>, <Function test__create_multiple_assets__all_succeed>, <Function test__query_assets_with_correct_id__returns_assets>, <Function test__query_assets_with_incorrect_id__does_not_return_assets>, <Function test__export_assets__returns_file_ids>, <Function test__update_assets_with_correct_id__updates_assets>, <Function test__update_assets_with_incorrect_id__does_not_update_assets>, <Function test__query_location_with_correct_id__returns_location_history>, <Function test__query_location_with_incorrect_id__does_not_return_location_history>, <Function test__delete_assets_with_Correct_id__deletes_assets>, <Function test__delete_assets_with_incorrect_id__fails>, <Function test__link_files_with_correct_asset_id__links_files>, <Function test__link_files_with_incorrect_asset_id__does_not_link_files>, <Function test__unlink_files_with_correct_asset_id__unlinks_files>, <Function test__unlink_files_with_incorrect_asset_id__does_not_unlink_files>]
            start_path: D:\nisystemlink-clients-python\tests\integration\assetManagement
            startdir: D:\nisystemlink-clients-python\tests\integration\assetManagement
        finish pytest_report_collectionfinish --> [] [hook]
      finish pytest_collection_finish --> [] [hook]
      pytest_warning_recorded [hook]
          warning_message: {message : DeprecationWarning('pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html'), category : 'DeprecationWarning', filename : 'C:\\Users\\sam.rishi\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\nisystemlink-clients-uNO-BdPa-py3.13\\Lib\\site-packages\\uplink\\_extras.py', lineno : 4, line : None}
          nodeid: 
          when: collect
          location: None
      finish pytest_warning_recorded --> [] [hook]
      pytest_warning_recorded [hook]
          warning_message: {message : DeprecationWarning("Failing to pass a value to the 'type_params' parameter of 'typing.ForwardRef._evaluate' is deprecated, as it leads to incorrect behaviour when calling typing.ForwardRef._evaluate on a stringified annotation that references a PEP 695 type parameter. It will be disallowed in Python 3.15."), category : 'DeprecationWarning', filename : 'C:\\Users\\sam.rishi\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\nisystemlink-clients-uNO-BdPa-py3.13\\Lib\\site-packages\\pydantic\\typing.py', lineno : 68, line : None}
          nodeid: 
          when: collect
          location: None
      finish pytest_warning_recorded --> [] [hook]
      pytest_warning_recorded [hook]
          warning_message: {message : DeprecationWarning("Failing to pass a value to the 'type_params' parameter of 'typing.ForwardRef._evaluate' is deprecated, as it leads to incorrect behaviour when calling typing.ForwardRef._evaluate on a stringified annotation that references a PEP 695 type parameter. It will be disallowed in Python 3.15."), category : 'DeprecationWarning', filename : 'C:\\Users\\sam.rishi\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\nisystemlink-clients-uNO-BdPa-py3.13\\Lib\\site-packages\\pydantic\\typing.py', lineno : 68, line : None}
          nodeid: 
          when: collect
          location: None
      finish pytest_warning_recorded --> [] [hook]
      pytest_warning_recorded [hook]
          warning_message: {message : DeprecationWarning("Failing to pass a value to the 'type_params' parameter of 'typing.ForwardRef._evaluate' is deprecated, as it leads to incorrect behaviour when calling typing.ForwardRef._evaluate on a stringified annotation that references a PEP 695 type parameter. It will be disallowed in Python 3.15."), category : 'DeprecationWarning', filename : 'C:\\Users\\sam.rishi\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\nisystemlink-clients-uNO-BdPa-py3.13\\Lib\\site-packages\\pydantic\\typing.py', lineno : 68, line : None}
          nodeid: 
          when: collect
          location: None
      finish pytest_warning_recorded --> [] [hook]
    finish pytest_collection --> None [hook]
    pytest_runtestloop [hook]
        session: <Session nisystemlink-clients-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=20>
      pytest_runtest_protocol [hook]
          item: <Function test__get_assets__returns_all_assets>
          nextitem: <Function test__get_assets_with_specific_take_value__returns_specific_number_of_assets>
        pytest_runtest_logstart [hook]
            nodeid: tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__get_assets__returns_all_assets
            location: ('tests\\integration\\assetManagement\\test_asset_management.py', 82, 'TestAssetManagement.test__get_assets__returns_all_assets')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test__get_assets__returns_all_assets>
        pytest_runtest_makereport [hook]
            item: <Function test__get_assets__returns_all_assets>
            call: <CallInfo when='setup' excinfo=<ExceptionInfo unconditional skip tblen=12>>
        finish pytest_runtest_makereport --> <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__get_assets__returns_all_assets' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__get_assets__returns_all_assets' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__get_assets__returns_all_assets' when='setup' outcome='skipped'>
              config: <_pytest.config.Config object at 0x0000013CD65D6270>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test__get_assets__returns_all_assets>
            nextitem: <Function test__get_assets_with_specific_take_value__returns_specific_number_of_assets>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test__get_assets__returns_all_assets>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__get_assets__returns_all_assets' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__get_assets__returns_all_assets' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__get_assets__returns_all_assets' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x0000013CD65D6270>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__get_assets__returns_all_assets
            location: ('tests\\integration\\assetManagement\\test_asset_management.py', 82, 'TestAssetManagement.test__get_assets__returns_all_assets')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test__get_assets_with_specific_take_value__returns_specific_number_of_assets>
          nextitem: <Function test__get_assets_summary__returs_assets_summary>
        pytest_runtest_logstart [hook]
            nodeid: tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__get_assets_with_specific_take_value__returns_specific_number_of_assets
            location: ('tests\\integration\\assetManagement\\test_asset_management.py', 92, 'TestAssetManagement.test__get_assets_with_specific_take_value__returns_specific_number_of_assets')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test__get_assets_with_specific_take_value__returns_specific_number_of_assets>
        pytest_runtest_makereport [hook]
            item: <Function test__get_assets_with_specific_take_value__returns_specific_number_of_assets>
            call: <CallInfo when='setup' excinfo=<ExceptionInfo unconditional skip tblen=12>>
        finish pytest_runtest_makereport --> <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__get_assets_with_specific_take_value__returns_specific_number_of_assets' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__get_assets_with_specific_take_value__returns_specific_number_of_assets' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__get_assets_with_specific_take_value__returns_specific_number_of_assets' when='setup' outcome='skipped'>
              config: <_pytest.config.Config object at 0x0000013CD65D6270>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test__get_assets_with_specific_take_value__returns_specific_number_of_assets>
            nextitem: <Function test__get_assets_summary__returs_assets_summary>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test__get_assets_with_specific_take_value__returns_specific_number_of_assets>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__get_assets_with_specific_take_value__returns_specific_number_of_assets' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__get_assets_with_specific_take_value__returns_specific_number_of_assets' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__get_assets_with_specific_take_value__returns_specific_number_of_assets' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x0000013CD65D6270>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__get_assets_with_specific_take_value__returns_specific_number_of_assets
            location: ('tests\\integration\\assetManagement\\test_asset_management.py', 92, 'TestAssetManagement.test__get_assets_with_specific_take_value__returns_specific_number_of_assets')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test__get_assets_summary__returs_assets_summary>
          nextitem: <Function test__get_asset_by_correct_id__returns_the_asset>
        pytest_runtest_logstart [hook]
            nodeid: tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__get_assets_summary__returs_assets_summary
            location: ('tests\\integration\\assetManagement\\test_asset_management.py', 102, 'TestAssetManagement.test__get_assets_summary__returs_assets_summary')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test__get_assets_summary__returs_assets_summary>
        pytest_runtest_makereport [hook]
            item: <Function test__get_assets_summary__returs_assets_summary>
            call: <CallInfo when='setup' excinfo=<ExceptionInfo unconditional skip tblen=12>>
        finish pytest_runtest_makereport --> <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__get_assets_summary__returs_assets_summary' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__get_assets_summary__returs_assets_summary' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__get_assets_summary__returs_assets_summary' when='setup' outcome='skipped'>
              config: <_pytest.config.Config object at 0x0000013CD65D6270>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test__get_assets_summary__returs_assets_summary>
            nextitem: <Function test__get_asset_by_correct_id__returns_the_asset>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test__get_assets_summary__returs_assets_summary>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__get_assets_summary__returs_assets_summary' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__get_assets_summary__returs_assets_summary' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__get_assets_summary__returs_assets_summary' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x0000013CD65D6270>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__get_assets_summary__returs_assets_summary
            location: ('tests\\integration\\assetManagement\\test_asset_management.py', 102, 'TestAssetManagement.test__get_assets_summary__returs_assets_summary')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test__get_asset_by_correct_id__returns_the_asset>
          nextitem: <Function test__get_asset_by_incorrect_id__does_not_return_the_asset>
        pytest_runtest_logstart [hook]
            nodeid: tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__get_asset_by_correct_id__returns_the_asset
            location: ('tests\\integration\\assetManagement\\test_asset_management.py', 112, 'TestAssetManagement.test__get_asset_by_correct_id__returns_the_asset')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test__get_asset_by_correct_id__returns_the_asset>
        pytest_runtest_makereport [hook]
            item: <Function test__get_asset_by_correct_id__returns_the_asset>
            call: <CallInfo when='setup' excinfo=<ExceptionInfo unconditional skip tblen=12>>
        finish pytest_runtest_makereport --> <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__get_asset_by_correct_id__returns_the_asset' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__get_asset_by_correct_id__returns_the_asset' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__get_asset_by_correct_id__returns_the_asset' when='setup' outcome='skipped'>
              config: <_pytest.config.Config object at 0x0000013CD65D6270>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test__get_asset_by_correct_id__returns_the_asset>
            nextitem: <Function test__get_asset_by_incorrect_id__does_not_return_the_asset>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test__get_asset_by_correct_id__returns_the_asset>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__get_asset_by_correct_id__returns_the_asset' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__get_asset_by_correct_id__returns_the_asset' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__get_asset_by_correct_id__returns_the_asset' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x0000013CD65D6270>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__get_asset_by_correct_id__returns_the_asset
            location: ('tests\\integration\\assetManagement\\test_asset_management.py', 112, 'TestAssetManagement.test__get_asset_by_correct_id__returns_the_asset')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test__get_asset_by_incorrect_id__does_not_return_the_asset>
          nextitem: <Function test__create_one_asset__one_asset_gets_created>
        pytest_runtest_logstart [hook]
            nodeid: tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__get_asset_by_incorrect_id__does_not_return_the_asset
            location: ('tests\\integration\\assetManagement\\test_asset_management.py', 125, 'TestAssetManagement.test__get_asset_by_incorrect_id__does_not_return_the_asset')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test__get_asset_by_incorrect_id__does_not_return_the_asset>
        pytest_runtest_makereport [hook]
            item: <Function test__get_asset_by_incorrect_id__does_not_return_the_asset>
            call: <CallInfo when='setup' excinfo=<ExceptionInfo unconditional skip tblen=12>>
        finish pytest_runtest_makereport --> <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__get_asset_by_incorrect_id__does_not_return_the_asset' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__get_asset_by_incorrect_id__does_not_return_the_asset' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__get_asset_by_incorrect_id__does_not_return_the_asset' when='setup' outcome='skipped'>
              config: <_pytest.config.Config object at 0x0000013CD65D6270>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test__get_asset_by_incorrect_id__does_not_return_the_asset>
            nextitem: <Function test__create_one_asset__one_asset_gets_created>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test__get_asset_by_incorrect_id__does_not_return_the_asset>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__get_asset_by_incorrect_id__does_not_return_the_asset' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__get_asset_by_incorrect_id__does_not_return_the_asset' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__get_asset_by_incorrect_id__does_not_return_the_asset' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x0000013CD65D6270>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__get_asset_by_incorrect_id__does_not_return_the_asset
            location: ('tests\\integration\\assetManagement\\test_asset_management.py', 125, 'TestAssetManagement.test__get_asset_by_incorrect_id__does_not_return_the_asset')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test__create_one_asset__one_asset_gets_created>
          nextitem: <Function test__create_multiple_assets__all_succeed>
        pytest_runtest_logstart [hook]
            nodeid: tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__create_one_asset__one_asset_gets_created
            location: ('tests\\integration\\assetManagement\\test_asset_management.py', 136, 'TestAssetManagement.test__create_one_asset__one_asset_gets_created')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test__create_one_asset__one_asset_gets_created>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='pydantic_forbid_extra_fields' scope='session' baseid=''>
              request: <SubRequest 'pydantic_forbid_extra_fields' for <Function test__create_one_asset__one_asset_gets_created>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='pytestconfig' scope='session' baseid=''>
              request: <SubRequest 'pytestconfig' for <Function test__create_one_asset__one_asset_gets_created>>
          finish pytest_fixture_setup --> <_pytest.config.Config object at 0x0000013CD65D6270> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='enterprise_config' scope='class' baseid=''>
              request: <SubRequest 'enterprise_config' for <Function test__create_one_asset__one_asset_gets_created>>
          finish pytest_fixture_setup --> <nisystemlink.clients.core._http_configuration.HttpConfiguration object at 0x0000013CD921B230> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='client' scope='class' baseid='tests/integration/assetManagement/test_asset_management.py'>
              request: <SubRequest 'client' for <Function test__create_one_asset__one_asset_gets_created>>
          finish pytest_fixture_setup --> <nisystemlink.clients.assetManagement._asset_management_client.AssetManagementClient object at 0x0000013CD921ACF0> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='create_assets_request' scope='class' baseid='tests/integration/assetManagement/test_asset_management.py'>
              request: <SubRequest 'create_assets_request' for <Function test__create_one_asset__one_asset_gets_created>>
          finish pytest_fixture_setup --> <function create_assets_request at 0x0000013CD8CF8220> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test__create_one_asset__one_asset_gets_created>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__create_one_asset__one_asset_gets_created' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__create_one_asset__one_asset_gets_created' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__create_one_asset__one_asset_gets_created' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x0000013CD65D6270>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test__create_one_asset__one_asset_gets_created>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test__create_one_asset__one_asset_gets_created>
        pytest_runtest_makereport [hook]
            item: <Function test__create_one_asset__one_asset_gets_created>
            call: <CallInfo when='call' excinfo=<ExceptionInfo AttributeError("'function' object has no attribute 'json'") tblen=31>>
        early skip of rewriting module: _suggestions [assertion]
        early skip of rewriting module: _suggestions [assertion]
        finish pytest_runtest_makereport --> <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__create_one_asset__one_asset_gets_created' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__create_one_asset__one_asset_gets_created' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__create_one_asset__one_asset_gets_created' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x0000013CD65D6270>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <Function test__create_one_asset__one_asset_gets_created>
            call: <CallInfo when='call' excinfo=<ExceptionInfo AttributeError("'function' object has no attribute 'json'") tblen=31>>
            report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__create_one_asset__one_asset_gets_created' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test__create_one_asset__one_asset_gets_created>
            nextitem: <Function test__create_multiple_assets__all_succeed>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test__create_one_asset__one_asset_gets_created>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__create_one_asset__one_asset_gets_created' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__create_one_asset__one_asset_gets_created' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__create_one_asset__one_asset_gets_created' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x0000013CD65D6270>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__create_one_asset__one_asset_gets_created
            location: ('tests\\integration\\assetManagement\\test_asset_management.py', 136, 'TestAssetManagement.test__create_one_asset__one_asset_gets_created')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test__create_multiple_assets__all_succeed>
          nextitem: <Function test__query_assets_with_correct_id__returns_assets>
        pytest_runtest_logstart [hook]
            nodeid: tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__create_multiple_assets__all_succeed
            location: ('tests\\integration\\assetManagement\\test_asset_management.py', 148, 'TestAssetManagement.test__create_multiple_assets__all_succeed')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test__create_multiple_assets__all_succeed>
        pytest_runtest_makereport [hook]
            item: <Function test__create_multiple_assets__all_succeed>
            call: <CallInfo when='setup' excinfo=<ExceptionInfo unconditional skip tblen=12>>
        finish pytest_runtest_makereport --> <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__create_multiple_assets__all_succeed' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__create_multiple_assets__all_succeed' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__create_multiple_assets__all_succeed' when='setup' outcome='skipped'>
              config: <_pytest.config.Config object at 0x0000013CD65D6270>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test__create_multiple_assets__all_succeed>
            nextitem: <Function test__query_assets_with_correct_id__returns_assets>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test__create_multiple_assets__all_succeed>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__create_multiple_assets__all_succeed' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__create_multiple_assets__all_succeed' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__create_multiple_assets__all_succeed' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x0000013CD65D6270>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__create_multiple_assets__all_succeed
            location: ('tests\\integration\\assetManagement\\test_asset_management.py', 148, 'TestAssetManagement.test__create_multiple_assets__all_succeed')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test__query_assets_with_correct_id__returns_assets>
          nextitem: <Function test__query_assets_with_incorrect_id__does_not_return_assets>
        pytest_runtest_logstart [hook]
            nodeid: tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__query_assets_with_correct_id__returns_assets
            location: ('tests\\integration\\assetManagement\\test_asset_management.py', 187, 'TestAssetManagement.test__query_assets_with_correct_id__returns_assets')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test__query_assets_with_correct_id__returns_assets>
        pytest_runtest_makereport [hook]
            item: <Function test__query_assets_with_correct_id__returns_assets>
            call: <CallInfo when='setup' excinfo=<ExceptionInfo unconditional skip tblen=12>>
        finish pytest_runtest_makereport --> <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__query_assets_with_correct_id__returns_assets' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__query_assets_with_correct_id__returns_assets' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__query_assets_with_correct_id__returns_assets' when='setup' outcome='skipped'>
              config: <_pytest.config.Config object at 0x0000013CD65D6270>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test__query_assets_with_correct_id__returns_assets>
            nextitem: <Function test__query_assets_with_incorrect_id__does_not_return_assets>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test__query_assets_with_correct_id__returns_assets>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__query_assets_with_correct_id__returns_assets' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__query_assets_with_correct_id__returns_assets' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__query_assets_with_correct_id__returns_assets' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x0000013CD65D6270>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__query_assets_with_correct_id__returns_assets
            location: ('tests\\integration\\assetManagement\\test_asset_management.py', 187, 'TestAssetManagement.test__query_assets_with_correct_id__returns_assets')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test__query_assets_with_incorrect_id__does_not_return_assets>
          nextitem: <Function test__export_assets__returns_file_ids>
        pytest_runtest_logstart [hook]
            nodeid: tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__query_assets_with_incorrect_id__does_not_return_assets
            location: ('tests\\integration\\assetManagement\\test_asset_management.py', 208, 'TestAssetManagement.test__query_assets_with_incorrect_id__does_not_return_assets')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test__query_assets_with_incorrect_id__does_not_return_assets>
        pytest_runtest_makereport [hook]
            item: <Function test__query_assets_with_incorrect_id__does_not_return_assets>
            call: <CallInfo when='setup' excinfo=<ExceptionInfo unconditional skip tblen=12>>
        finish pytest_runtest_makereport --> <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__query_assets_with_incorrect_id__does_not_return_assets' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__query_assets_with_incorrect_id__does_not_return_assets' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__query_assets_with_incorrect_id__does_not_return_assets' when='setup' outcome='skipped'>
              config: <_pytest.config.Config object at 0x0000013CD65D6270>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test__query_assets_with_incorrect_id__does_not_return_assets>
            nextitem: <Function test__export_assets__returns_file_ids>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test__query_assets_with_incorrect_id__does_not_return_assets>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__query_assets_with_incorrect_id__does_not_return_assets' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__query_assets_with_incorrect_id__does_not_return_assets' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__query_assets_with_incorrect_id__does_not_return_assets' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x0000013CD65D6270>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__query_assets_with_incorrect_id__does_not_return_assets
            location: ('tests\\integration\\assetManagement\\test_asset_management.py', 208, 'TestAssetManagement.test__query_assets_with_incorrect_id__does_not_return_assets')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test__export_assets__returns_file_ids>
          nextitem: <Function test__update_assets_with_correct_id__updates_assets>
        pytest_runtest_logstart [hook]
            nodeid: tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__export_assets__returns_file_ids
            location: ('tests\\integration\\assetManagement\\test_asset_management.py', 226, 'TestAssetManagement.test__export_assets__returns_file_ids')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test__export_assets__returns_file_ids>
        pytest_runtest_makereport [hook]
            item: <Function test__export_assets__returns_file_ids>
            call: <CallInfo when='setup' excinfo=<ExceptionInfo unconditional skip tblen=12>>
        finish pytest_runtest_makereport --> <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__export_assets__returns_file_ids' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__export_assets__returns_file_ids' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__export_assets__returns_file_ids' when='setup' outcome='skipped'>
              config: <_pytest.config.Config object at 0x0000013CD65D6270>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test__export_assets__returns_file_ids>
            nextitem: <Function test__update_assets_with_correct_id__updates_assets>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test__export_assets__returns_file_ids>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__export_assets__returns_file_ids' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__export_assets__returns_file_ids' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__export_assets__returns_file_ids' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x0000013CD65D6270>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__export_assets__returns_file_ids
            location: ('tests\\integration\\assetManagement\\test_asset_management.py', 226, 'TestAssetManagement.test__export_assets__returns_file_ids')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test__update_assets_with_correct_id__updates_assets>
          nextitem: <Function test__update_assets_with_incorrect_id__does_not_update_assets>
        pytest_runtest_logstart [hook]
            nodeid: tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__update_assets_with_correct_id__updates_assets
            location: ('tests\\integration\\assetManagement\\test_asset_management.py', 240, 'TestAssetManagement.test__update_assets_with_correct_id__updates_assets')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test__update_assets_with_correct_id__updates_assets>
        pytest_runtest_makereport [hook]
            item: <Function test__update_assets_with_correct_id__updates_assets>
            call: <CallInfo when='setup' excinfo=<ExceptionInfo unconditional skip tblen=12>>
        finish pytest_runtest_makereport --> <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__update_assets_with_correct_id__updates_assets' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__update_assets_with_correct_id__updates_assets' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__update_assets_with_correct_id__updates_assets' when='setup' outcome='skipped'>
              config: <_pytest.config.Config object at 0x0000013CD65D6270>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test__update_assets_with_correct_id__updates_assets>
            nextitem: <Function test__update_assets_with_incorrect_id__does_not_update_assets>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test__update_assets_with_correct_id__updates_assets>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__update_assets_with_correct_id__updates_assets' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__update_assets_with_correct_id__updates_assets' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__update_assets_with_correct_id__updates_assets' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x0000013CD65D6270>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__update_assets_with_correct_id__updates_assets
            location: ('tests\\integration\\assetManagement\\test_asset_management.py', 240, 'TestAssetManagement.test__update_assets_with_correct_id__updates_assets')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test__update_assets_with_incorrect_id__does_not_update_assets>
          nextitem: <Function test__query_location_with_correct_id__returns_location_history>
        pytest_runtest_logstart [hook]
            nodeid: tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__update_assets_with_incorrect_id__does_not_update_assets
            location: ('tests\\integration\\assetManagement\\test_asset_management.py', 282, 'TestAssetManagement.test__update_assets_with_incorrect_id__does_not_update_assets')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test__update_assets_with_incorrect_id__does_not_update_assets>
        pytest_runtest_makereport [hook]
            item: <Function test__update_assets_with_incorrect_id__does_not_update_assets>
            call: <CallInfo when='setup' excinfo=<ExceptionInfo unconditional skip tblen=12>>
        finish pytest_runtest_makereport --> <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__update_assets_with_incorrect_id__does_not_update_assets' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__update_assets_with_incorrect_id__does_not_update_assets' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__update_assets_with_incorrect_id__does_not_update_assets' when='setup' outcome='skipped'>
              config: <_pytest.config.Config object at 0x0000013CD65D6270>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test__update_assets_with_incorrect_id__does_not_update_assets>
            nextitem: <Function test__query_location_with_correct_id__returns_location_history>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test__update_assets_with_incorrect_id__does_not_update_assets>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__update_assets_with_incorrect_id__does_not_update_assets' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__update_assets_with_incorrect_id__does_not_update_assets' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__update_assets_with_incorrect_id__does_not_update_assets' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x0000013CD65D6270>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__update_assets_with_incorrect_id__does_not_update_assets
            location: ('tests\\integration\\assetManagement\\test_asset_management.py', 282, 'TestAssetManagement.test__update_assets_with_incorrect_id__does_not_update_assets')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test__query_location_with_correct_id__returns_location_history>
          nextitem: <Function test__query_location_with_incorrect_id__does_not_return_location_history>
        pytest_runtest_logstart [hook]
            nodeid: tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__query_location_with_correct_id__returns_location_history
            location: ('tests\\integration\\assetManagement\\test_asset_management.py', 320, 'TestAssetManagement.test__query_location_with_correct_id__returns_location_history')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test__query_location_with_correct_id__returns_location_history>
        pytest_runtest_makereport [hook]
            item: <Function test__query_location_with_correct_id__returns_location_history>
            call: <CallInfo when='setup' excinfo=<ExceptionInfo unconditional skip tblen=12>>
        finish pytest_runtest_makereport --> <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__query_location_with_correct_id__returns_location_history' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__query_location_with_correct_id__returns_location_history' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__query_location_with_correct_id__returns_location_history' when='setup' outcome='skipped'>
              config: <_pytest.config.Config object at 0x0000013CD65D6270>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test__query_location_with_correct_id__returns_location_history>
            nextitem: <Function test__query_location_with_incorrect_id__does_not_return_location_history>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test__query_location_with_correct_id__returns_location_history>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__query_location_with_correct_id__returns_location_history' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__query_location_with_correct_id__returns_location_history' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__query_location_with_correct_id__returns_location_history' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x0000013CD65D6270>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__query_location_with_correct_id__returns_location_history
            location: ('tests\\integration\\assetManagement\\test_asset_management.py', 320, 'TestAssetManagement.test__query_location_with_correct_id__returns_location_history')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test__query_location_with_incorrect_id__does_not_return_location_history>
          nextitem: <Function test__delete_assets_with_Correct_id__deletes_assets>
        pytest_runtest_logstart [hook]
            nodeid: tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__query_location_with_incorrect_id__does_not_return_location_history
            location: ('tests\\integration\\assetManagement\\test_asset_management.py', 338, 'TestAssetManagement.test__query_location_with_incorrect_id__does_not_return_location_history')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test__query_location_with_incorrect_id__does_not_return_location_history>
        pytest_runtest_makereport [hook]
            item: <Function test__query_location_with_incorrect_id__does_not_return_location_history>
            call: <CallInfo when='setup' excinfo=<ExceptionInfo unconditional skip tblen=12>>
        finish pytest_runtest_makereport --> <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__query_location_with_incorrect_id__does_not_return_location_history' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__query_location_with_incorrect_id__does_not_return_location_history' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__query_location_with_incorrect_id__does_not_return_location_history' when='setup' outcome='skipped'>
              config: <_pytest.config.Config object at 0x0000013CD65D6270>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test__query_location_with_incorrect_id__does_not_return_location_history>
            nextitem: <Function test__delete_assets_with_Correct_id__deletes_assets>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test__query_location_with_incorrect_id__does_not_return_location_history>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__query_location_with_incorrect_id__does_not_return_location_history' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__query_location_with_incorrect_id__does_not_return_location_history' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__query_location_with_incorrect_id__does_not_return_location_history' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x0000013CD65D6270>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__query_location_with_incorrect_id__does_not_return_location_history
            location: ('tests\\integration\\assetManagement\\test_asset_management.py', 338, 'TestAssetManagement.test__query_location_with_incorrect_id__does_not_return_location_history')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test__delete_assets_with_Correct_id__deletes_assets>
          nextitem: <Function test__delete_assets_with_incorrect_id__fails>
        pytest_runtest_logstart [hook]
            nodeid: tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__delete_assets_with_Correct_id__deletes_assets
            location: ('tests\\integration\\assetManagement\\test_asset_management.py', 353, 'TestAssetManagement.test__delete_assets_with_Correct_id__deletes_assets')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test__delete_assets_with_Correct_id__deletes_assets>
        pytest_runtest_makereport [hook]
            item: <Function test__delete_assets_with_Correct_id__deletes_assets>
            call: <CallInfo when='setup' excinfo=<ExceptionInfo unconditional skip tblen=12>>
        finish pytest_runtest_makereport --> <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__delete_assets_with_Correct_id__deletes_assets' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__delete_assets_with_Correct_id__deletes_assets' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__delete_assets_with_Correct_id__deletes_assets' when='setup' outcome='skipped'>
              config: <_pytest.config.Config object at 0x0000013CD65D6270>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test__delete_assets_with_Correct_id__deletes_assets>
            nextitem: <Function test__delete_assets_with_incorrect_id__fails>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test__delete_assets_with_Correct_id__deletes_assets>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__delete_assets_with_Correct_id__deletes_assets' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__delete_assets_with_Correct_id__deletes_assets' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__delete_assets_with_Correct_id__deletes_assets' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x0000013CD65D6270>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__delete_assets_with_Correct_id__deletes_assets
            location: ('tests\\integration\\assetManagement\\test_asset_management.py', 353, 'TestAssetManagement.test__delete_assets_with_Correct_id__deletes_assets')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test__delete_assets_with_incorrect_id__fails>
          nextitem: <Function test__link_files_with_correct_asset_id__links_files>
        pytest_runtest_logstart [hook]
            nodeid: tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__delete_assets_with_incorrect_id__fails
            location: ('tests\\integration\\assetManagement\\test_asset_management.py', 365, 'TestAssetManagement.test__delete_assets_with_incorrect_id__fails')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test__delete_assets_with_incorrect_id__fails>
        pytest_runtest_makereport [hook]
            item: <Function test__delete_assets_with_incorrect_id__fails>
            call: <CallInfo when='setup' excinfo=<ExceptionInfo unconditional skip tblen=12>>
        finish pytest_runtest_makereport --> <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__delete_assets_with_incorrect_id__fails' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__delete_assets_with_incorrect_id__fails' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__delete_assets_with_incorrect_id__fails' when='setup' outcome='skipped'>
              config: <_pytest.config.Config object at 0x0000013CD65D6270>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test__delete_assets_with_incorrect_id__fails>
            nextitem: <Function test__link_files_with_correct_asset_id__links_files>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test__delete_assets_with_incorrect_id__fails>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__delete_assets_with_incorrect_id__fails' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__delete_assets_with_incorrect_id__fails' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__delete_assets_with_incorrect_id__fails' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x0000013CD65D6270>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__delete_assets_with_incorrect_id__fails
            location: ('tests\\integration\\assetManagement\\test_asset_management.py', 365, 'TestAssetManagement.test__delete_assets_with_incorrect_id__fails')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test__link_files_with_correct_asset_id__links_files>
          nextitem: <Function test__link_files_with_incorrect_asset_id__does_not_link_files>
        pytest_runtest_logstart [hook]
            nodeid: tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__link_files_with_correct_asset_id__links_files
            location: ('tests\\integration\\assetManagement\\test_asset_management.py', 377, 'TestAssetManagement.test__link_files_with_correct_asset_id__links_files')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test__link_files_with_correct_asset_id__links_files>
        pytest_runtest_makereport [hook]
            item: <Function test__link_files_with_correct_asset_id__links_files>
            call: <CallInfo when='setup' excinfo=<ExceptionInfo unconditional skip tblen=12>>
        finish pytest_runtest_makereport --> <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__link_files_with_correct_asset_id__links_files' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__link_files_with_correct_asset_id__links_files' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__link_files_with_correct_asset_id__links_files' when='setup' outcome='skipped'>
              config: <_pytest.config.Config object at 0x0000013CD65D6270>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test__link_files_with_correct_asset_id__links_files>
            nextitem: <Function test__link_files_with_incorrect_asset_id__does_not_link_files>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test__link_files_with_correct_asset_id__links_files>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__link_files_with_correct_asset_id__links_files' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__link_files_with_correct_asset_id__links_files' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__link_files_with_correct_asset_id__links_files' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x0000013CD65D6270>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__link_files_with_correct_asset_id__links_files
            location: ('tests\\integration\\assetManagement\\test_asset_management.py', 377, 'TestAssetManagement.test__link_files_with_correct_asset_id__links_files')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test__link_files_with_incorrect_asset_id__does_not_link_files>
          nextitem: <Function test__unlink_files_with_correct_asset_id__unlinks_files>
        pytest_runtest_logstart [hook]
            nodeid: tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__link_files_with_incorrect_asset_id__does_not_link_files
            location: ('tests\\integration\\assetManagement\\test_asset_management.py', 393, 'TestAssetManagement.test__link_files_with_incorrect_asset_id__does_not_link_files')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test__link_files_with_incorrect_asset_id__does_not_link_files>
        pytest_runtest_makereport [hook]
            item: <Function test__link_files_with_incorrect_asset_id__does_not_link_files>
            call: <CallInfo when='setup' excinfo=<ExceptionInfo unconditional skip tblen=12>>
        finish pytest_runtest_makereport --> <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__link_files_with_incorrect_asset_id__does_not_link_files' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__link_files_with_incorrect_asset_id__does_not_link_files' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__link_files_with_incorrect_asset_id__does_not_link_files' when='setup' outcome='skipped'>
              config: <_pytest.config.Config object at 0x0000013CD65D6270>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test__link_files_with_incorrect_asset_id__does_not_link_files>
            nextitem: <Function test__unlink_files_with_correct_asset_id__unlinks_files>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test__link_files_with_incorrect_asset_id__does_not_link_files>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__link_files_with_incorrect_asset_id__does_not_link_files' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__link_files_with_incorrect_asset_id__does_not_link_files' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__link_files_with_incorrect_asset_id__does_not_link_files' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x0000013CD65D6270>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__link_files_with_incorrect_asset_id__does_not_link_files
            location: ('tests\\integration\\assetManagement\\test_asset_management.py', 393, 'TestAssetManagement.test__link_files_with_incorrect_asset_id__does_not_link_files')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test__unlink_files_with_correct_asset_id__unlinks_files>
          nextitem: <Function test__unlink_files_with_incorrect_asset_id__does_not_unlink_files>
        pytest_runtest_logstart [hook]
            nodeid: tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__unlink_files_with_correct_asset_id__unlinks_files
            location: ('tests\\integration\\assetManagement\\test_asset_management.py', 406, 'TestAssetManagement.test__unlink_files_with_correct_asset_id__unlinks_files')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test__unlink_files_with_correct_asset_id__unlinks_files>
        pytest_runtest_makereport [hook]
            item: <Function test__unlink_files_with_correct_asset_id__unlinks_files>
            call: <CallInfo when='setup' excinfo=<ExceptionInfo unconditional skip tblen=12>>
        finish pytest_runtest_makereport --> <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__unlink_files_with_correct_asset_id__unlinks_files' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__unlink_files_with_correct_asset_id__unlinks_files' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__unlink_files_with_correct_asset_id__unlinks_files' when='setup' outcome='skipped'>
              config: <_pytest.config.Config object at 0x0000013CD65D6270>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test__unlink_files_with_correct_asset_id__unlinks_files>
            nextitem: <Function test__unlink_files_with_incorrect_asset_id__does_not_unlink_files>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test__unlink_files_with_correct_asset_id__unlinks_files>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__unlink_files_with_correct_asset_id__unlinks_files' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__unlink_files_with_correct_asset_id__unlinks_files' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__unlink_files_with_correct_asset_id__unlinks_files' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x0000013CD65D6270>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__unlink_files_with_correct_asset_id__unlinks_files
            location: ('tests\\integration\\assetManagement\\test_asset_management.py', 406, 'TestAssetManagement.test__unlink_files_with_correct_asset_id__unlinks_files')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test__unlink_files_with_incorrect_asset_id__does_not_unlink_files>
          nextitem: None
        pytest_runtest_logstart [hook]
            nodeid: tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__unlink_files_with_incorrect_asset_id__does_not_unlink_files
            location: ('tests\\integration\\assetManagement\\test_asset_management.py', 420, 'TestAssetManagement.test__unlink_files_with_incorrect_asset_id__does_not_unlink_files')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test__unlink_files_with_incorrect_asset_id__does_not_unlink_files>
        pytest_runtest_makereport [hook]
            item: <Function test__unlink_files_with_incorrect_asset_id__does_not_unlink_files>
            call: <CallInfo when='setup' excinfo=<ExceptionInfo unconditional skip tblen=12>>
        finish pytest_runtest_makereport --> <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__unlink_files_with_incorrect_asset_id__does_not_unlink_files' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__unlink_files_with_incorrect_asset_id__does_not_unlink_files' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__unlink_files_with_incorrect_asset_id__does_not_unlink_files' when='setup' outcome='skipped'>
              config: <_pytest.config.Config object at 0x0000013CD65D6270>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test__unlink_files_with_incorrect_asset_id__does_not_unlink_files>
            nextitem: None
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='create_assets_request' scope='class' baseid='tests/integration/assetManagement/test_asset_management.py'>
              request: <SubRequest 'create_assets_request' for <Function test__create_one_asset__one_asset_gets_created>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='client' scope='class' baseid='tests/integration/assetManagement/test_asset_management.py'>
              request: <SubRequest 'client' for <Function test__create_one_asset__one_asset_gets_created>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='client' scope='class' baseid='tests/integration/assetManagement/test_asset_management.py'>
              request: <SubRequest 'client' for <Function test__create_one_asset__one_asset_gets_created>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='enterprise_config' scope='class' baseid=''>
              request: <SubRequest 'enterprise_config' for <Function test__create_one_asset__one_asset_gets_created>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='enterprise_config' scope='class' baseid=''>
              request: <SubRequest 'enterprise_config' for <Function test__create_one_asset__one_asset_gets_created>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='pytestconfig' scope='session' baseid=''>
              request: <SubRequest 'pytestconfig' for <Function test__create_one_asset__one_asset_gets_created>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='pydantic_forbid_extra_fields' scope='session' baseid=''>
              request: <SubRequest 'pydantic_forbid_extra_fields' for <Function test__create_one_asset__one_asset_gets_created>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test__unlink_files_with_incorrect_asset_id__does_not_unlink_files>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__unlink_files_with_incorrect_asset_id__does_not_unlink_files' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__unlink_files_with_incorrect_asset_id__does_not_unlink_files' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__unlink_files_with_incorrect_asset_id__does_not_unlink_files' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x0000013CD65D6270>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__unlink_files_with_incorrect_asset_id__does_not_unlink_files
            location: ('tests\\integration\\assetManagement\\test_asset_management.py', 420, 'TestAssetManagement.test__unlink_files_with_incorrect_asset_id__does_not_unlink_files')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
    finish pytest_runtestloop --> True [hook]
    pytest_sessionfinish [hook]
        session: <Session nisystemlink-clients-python exitstatus=<ExitCode.TESTS_FAILED: 1> testsfailed=1 testscollected=20>
        exitstatus: 1
      pytest_terminal_summary [hook]
          terminalreporter: <_pytest.terminal.TerminalReporter object at 0x0000013CD8BFC1A0>
          exitstatus: 1
          config: <_pytest.config.Config object at 0x0000013CD65D6270>
      early skip of rewriting module: pygments [assertion]
      early skip of rewriting module: pygments [assertion]
      early skip of rewriting module: pygments [assertion]
      early skip of rewriting module: pygments [assertion]
      early skip of rewriting module: pygments [assertion]
      early skip of rewriting module: pygments [assertion]
      early skip of rewriting module: pygments [assertion]
        pytest_report_teststatus [hook]
            report: <TestReport 'tests/integration/assetManagement/test_asset_management.py::TestAssetManagement::test__create_one_asset__one_asset_gets_created' when='call' outcome='failed'>
            config: <_pytest.config.Config object at 0x0000013CD65D6270>
        finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
      finish pytest_terminal_summary --> [] [hook]
    finish pytest_sessionfinish --> [] [hook]
    pytest_unconfigure [hook]
        config: <_pytest.config.Config object at 0x0000013CD65D6270>
    finish pytest_unconfigure --> [] [hook]
